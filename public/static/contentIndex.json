{"Dev/Comment-j'ai-hacké-le-dino-de-Chrome":{"title":"Comment j'ai hacké le dino de Chrome","links":[],"tags":["javascript","reverse","engineering","rétro-ingenierie","chrome","dino"],"content":"Plus de connexion Internet pour bosser ? Il est alors temps de démarrer l’activité préférée des développeur·euses web sans Internet : jouer avec le dino de Chrome. Ce petit jeu à la simplicité débordante est un parfait passe-temps lors des périodes non propices à la productivité, bref, quand on a envie de faire une pause. Mais est-ce que c’est pas hyper classe de pouvoir arriver à la machine à café en montrant un screenshot du dino de Chrome avec un score indécent ? Absolument pas, mais c’est tout de même rigolo.\nPendant un coding dojo sur la rétro-ingénierie, nous nous sommes amusé·es à construire un script qui serait capable de rivaliser avec la crème des joueuses et des joueurs du Chromedino. L’objectif est simple : jouer avec les mêmes moyens qu’un·e joueur·euse pour faire le meilleur score possible. Donc adieu tous les trucages de score en mémoire, les dinos qui volent au-dessus des obstacles ou tout autre obscénité virtuelle, nous partons à la conquête du leaderbord des dinos.\nPour cet article, nous avons travaillé avec la version de jeu du site Chromedino.com car je suis un hipster qui utilise Vivaldi.\nDéconstruire le Chromedino\nLorsque l’on fait de la rétro-ingénierie, deux choix s’offrent à nous :\n\nla voie de la simplicité ou boîte blanche, consistant à utiliser le code qui est disponible pour le lire, le comprendre et l’utiliser au mieux.\nla voie de la compréhension ou boite noire, où l’on va chercher à comprendre le comportement d’un code uniquement en effectuant des actions sans jamais utiliser la source (car non disponible).\n\nUne troisième voie existe malgré tout et est valable dans des langages dont le code est compilé : celle de la boîte noire qu’on a essayé de repeindre en blanc. Grosso modo, des programmes existent pour décompiler un code afin d’obtenir notamment les instructions approximatives qu’exécute le fameux code. La lecture et la modification de ces informations est très complexe, mais permet de faire plein de choses fabuleuses, comme par exemple les fameux cracks no-cd qui permettent de lancer des programmes sans les CDs nécessaires. Bien évidemment, la décompilation n’est souvent pas légale, car elle enfreint les conditions d’utilisation des logiciels. Bref, c’était pour votre culture.\nDans le développement Web, on peut très souvent faire de la rétro-ingénierie en boîte blanche étant donné que le code est uniquement interprété et reste souvent lisible. Les seules difficultés de lecture peuvent venir d’un code qui a été obfusqué, pour justement repousser les gens à mettre leurs pattes dans le code.\nPour notre Chromedino, nous allons nous servir des outils de développement pour accéder directement au script du jeu. Dans l’onglet Sources des outils, on peut consulter l’intégralité des assets chargés pour notre page. De fait, on va y retrouver le script permettant de faire fonctionner le Chromedino sous le nom de game.js?v=2.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tLe fameux code du jeu\n\t\t\t\t\t\t\t\t\t\t\t\nEn lisant le fichier, on remarque tous les classiques d’un jeu vidéo : une boucle de rendu pour mettre à jour le jeu en permanence, des sons, des contrôles, des objets pour représenter le dino (Trex) ou les obstacles, etc. La chose intéressante est que, à la ligne 69, l’objet Runner contenant l’intégralité du jeu est placé dans les variables globales de window. Du coup, nous avons déjà un point d’entrée pour manipuler le jeu directement par son code et sa mémoire. Et c’est déjà un sacré coup de pouce pour pouvoir s’amuser.\nPour vérifier notre hypothèse, démarrez le jeu une première fois en appyant sur la flèche haut, puis lancez la commande suivante dans votre terminal :\nRunner.instance_.restart();\nVotre jeu redémarre. Nous pouvons donc faire ce que nous voulons avec le jeu. C’est parti !\nJe scripte, donc je suis\nL’objet Runner.instance_ contient un bon nombre d’informations qui vont nous intéresser :\n\ntRex contient l’objet de notre dinosaure adoré.\nhorizon contient les objets relatifs aux obstacles via horizon.obstacles.\ncurrentSpeed contient la valeur de la vitesse actuelle du jeu.\n\nIl y a bien d’autres choses, mais pour réussir à aller loin, je n’utilise pas plus de données.\nSi on lit le code du jeu, on remarque que le dino effectue la commande suivante lorsque l’on presse la touche pour sauter (ligne 487) :\nthis.tRex.startJump(this.currentSpeed);\nDu coup, nous pouvons vérifier le bon comportement du saut en entrant la commande suivante dans notre console (quand le jeu est démarré) :\nRunner.instance_.tRex.startJump(Runner.instance_.currentSpeed);\nIncroyable, le dino a sauté ! Nous pouvons donc le contrôler. Mais comment peut-on effectuer nos actions à n’importe quel moment du jeu ?\nPour se faire, nous allons “écraser” la boucle de rendering (la fonction update()) pour rajouter les actions que nous souhaitons faire à chaque mise à jour du jeu, puis appeler l’ancienne fonction de mise à jour pour conserver le comportement normal du jeu. Cette technique s’appelle le monkey-patching.\nD’un point de vue code, si nous souhaitons faire sauter le dino dés que possible, nous pouvons utiliser le code suivant :\nconst ctx = Runner.instance_; // Keep instance in a variable for shorter code\n \nctx._update = ctx.update; // Save old update function\n \nctx.update = () =&gt; {\n  ctx._update();\n \n  ctx.tRex.startJump(ctx.currentSpeed);\n};\n \nctx.restart();\nNotre dinosaure s’est épris d’une rage folle et saute maintenant comme un marsupilami. C’est déjà un bon début ! Mais ne serait-il pas mieux que le dinosaure ne saute que si on repère un obstacle proche ?\nDans ce cas, nous allons vérifier si un obstacle est à moins d’une certaine distance du dinosaure. En testant un petit peu, nous avons déterminer que, de base, si un obstacle est à moins de 160 pixels sur le canvas, il vaut mieux sauter.\nctx.update = () =&gt; {\n  ctx._update();\n \n  if (ctx.horizon.obstacles[0].xPos &lt; 160) {\n    ctx.tRex.startJump(ctx.currentSpeed);\n  }\n};\n \nctx.restart();\nOkay, là, on a l’impression qu’une intelligence artificielle a pris le contrôle du Chromedino. Cependant, certains enchaînements de cactus peut tromper notre dino, qui va lamentablement s’écraser sur lesdits cactus.\nPour corriger ce problème, il nous suffit d’utiliser la fonction pour tomber plus rapidement quand on presse la flèche du bas. On applique la chute rapide quand le premier obstacle a aussi atteint une certaine position.\nctx.update = () =&gt; {\n  ctx._update();\n \n  if (!ctx.horizon.obstacles.length) {\n    return; // Don&#039;t do anything if there&#039;s no obstacle\n  }\n \n  if (ctx.horizon.obstacles[0].xPos &lt; 160) {\n    if (ctx.horizon.obstacles[0].xPos &lt; 50) {\n      if (ctx.tRex.jumping) {\n        ctx.tRex.setSpeedDrop();\n      }\n    } else {\n      ctx.tRex.startJump(ctx.currentSpeed);\n    }\n  }\n};\n \nctx.restart();\nDernière obstacle : les oiseaux. Notre dinosaure a de trop petites pattes pour sauter au-dessus des oiseaux les plus hauts. Nous allons donc uniquement sauter si l’obstacle n’est pas trop haut. Sinon, nous allons nous baisser constamment pour éviter les mauvaises surprises.\nctx.update = () =&gt; {\n  ctx._update();\n \n  if (!ctx.horizon.obstacles.length) {\n    return;\n  }\n \n  if (ctx.horizon.obstacles[0].xPos &lt; 160) {\n    if (ctx.horizon.obstacles[0].xPos &lt; 50) {\n      if (ctx.tRex.jumping) {\n        ctx.tRex.setSpeedDrop();\n      }\n    } else if (ctx.horizon.obstacles[0].yPos &gt; 75) {\n      // Bird too high\n      ctx.tRex.startJump(ctx.currentSpeed);\n    }\n  }\n \n  if (!ctx.tRex.ducking &amp;&amp; !ctx.tRex.jumping) {\n    ctx.tRex.setDuck(true);\n  }\n};\n \nctx.restart();\nLa condition pour vérifier si un oiseau est trop haut peut sembler bizarre, car on va uniquement sauter si l’obstacle a une coordonnée y au-dessus de 75, et non au-dessous. La raison du sens de cette condition vient du fait qu’en informatique, l’axe Y est inversé par rapport aux mathématiques. Le point (0,0) se situe en haut à gauche et non en bas à gauche dans un canvas ou une image.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tOn raconte qu&#039;il se s&#039;arrêta plus jamais.\n\t\t\t\t\t\t\t\t\t\t\t\nVoilà ! Nous avons un script simple qui permet de faire des scores élevés à ce jeu (même s’il plante de temps en temps sur les 500 premiers points). On aurait aussi pu modifier directement le score avec un petit Runner.instance_.distanceRan = 10000000;, mais ce n’était pas aussi drôle que de voir notre dinosaure s’affranchir seul de tous les obstacles.\nN’hésitez pas à essayer d’améliorer le script, ou même de remplacer les appels aux sauts par des dispatch d’évenements claviers.\nJ’espère que ce petit article vous aura plu, et si vous souhaitez nous faire part de remarques, de commentaires, de compliments ou d’insultes (on ne sait jamais), hésitez pas à m’en faire part. Bon été ! :)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMerci de votre lecture ! &lt;3\n\t\t\t\t\t\t\t\t\t\t\t"},"Dev/I've-never-understood-Redux,-so-I-rewrote-it.":{"title":"I've never understood Redux, so I rewrote it.","links":[],"tags":["javascript","redux","react"],"content":"I’ve been using Redux for a few years. It’s cool! I can manage the state of my application in a single Store with many reducers. But… wait, what is really a store? A reducer? An action? Let’s decrypt it!\nNote: I wrote this article after having prepared a talk on the same subject. This article is more or less this talk’s retranscription (with all I want to say on the subject). If you’re interested, I can present the talk at some conference, so you can contact me at florian[at]kbdev[dot]io. Thanks a lot and have a good read!\nYeah, Redux! Honestly, I know there’s so much better ways to store state and all the things related to Redux. But I began to write React applications with it, and it was cool. Except I remember when I began to use it, it looks like learning to play Dwarf Fortress.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tReplace Dwarf Fortress with Redux\n\t\t\t\t\t\t\t\t\t\t\t\nEach time I wrote an action, I was sure some strange bugs would happen. What did this dispatch function do? How could I connect it to my React app? And, clearly the best: how could I write this f*cking async function?\nAfter writing a Typescript typed version of Redux, I saw the light: Redux is incredibly simple. I can now (and, after reading this article, you will be able to) write a Redux in 5 minutes. With async and history handling. Sounds cool huh?\nLet’s do some magic!\nWhat is Redux?\n\nA predictable state container for JavaScript apps.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMe. I&#039;m a penguin.\n\t\t\t\t\t\t\t\t\t\t\t\nHmmm … let’s try something better.\nImagine Redux like a big object which contains all global variables of your application. You cannot mutate directly this object. You need to call some functions to change it.\nA simple example is saying Redux is your bank. You have an amount on your account and you can only change this amount by doing some operations. An operation is an action (or mutation) and your account is the Store’s data.\nAction — I do an operation\nEach mutation is done by passing an action.\nAn action is just a simple Javascript object with a unique key (to recognize which action we are doing) and the data of the action. This little object is given to a function dispatch() which sends it.\nIn the bank example, an action is something like this:\n{\n\t&quot;type&quot;: &quot;ADD_AMOUNT_ON_ACCOUNT&quot;,\n\t&quot;value&quot;: 23.96\n}\nTo avoid doing some errors when typing the unique key of the action, we can create an Action Creator. This is just a function which creates the object. Something like this:\nconst ADD_AMOUNT_ON_ACCOUNT = &quot;ADD_AMOUNT_ON_ACCOUNT&quot;;\nconst REMOVE_AMOUNT_FROM_ACCOUNT = &quot;REMOVE_AMOUNT_FROM_ACCOUNT&quot;;\n \nfunction addAmountOnAccount(amount) {\n  return {\n    amount,\n    type: ADD_AMOUNT_ON_ACCOUNT\n  };\n}\n \n \nfunction removeAmountOnAccount(amount) {\n  return {\n    amount,\n    type: REMOVE_AMOUNT_ON_ACCOUNT\n  };\n}\n \nmodule.exports = {\n  ADD_AMOUNT_ON_ACCOUNT,\n  REMOVE_AMOUNT_FROM_ACCOUNT,\n \n  addAmountOnAccount,\n  removeAmountOnAccount\n};\nReducer — I treat the operation\nEach variable available in the application is a reducer.\nA Reducer is a function which returns the data for the current variable. It can be, for example, the state for the option “dark mode enabled” of your application. Or, in the bank example, the amount of money on all accounts.\nconst {\n  ADD_AMOUNT_ON_ACCOUNT,\n  REMOVE_AMOUNT_FROM_ACCOUNT\n} = require(&quot;./accountActions&quot;);\n \nmodule.exports = function accountAmount(state = { value: 0 }, action) {\n  switch (action.type) {\n    case ADD_AMOUNT_ON_ACCOUNT:\n      return { value: state.value + action.value };\n    case REMOVE_AMOUNT_FROM_ACCOUNT:\n      return { value: state.value - action.value };\n    default:\n      return state;\n  }\n};\nEach time you give a new action to a reducer, it will check if this type of action must be handled. If that is the case, the reducer will create a new output value which corresponds to the reducer new state.\nThese functions must be pure and without any side effect. These two conditions just tell:\n\na function must return the same result with the same arguments. (ex: a function which computes an addition is pure.)\na function must not do any modification to the environment. (ex: a function which mutates an argument has a side-effect.)\n\nThese conditions allow Redux to be completely predictable. If your functions always do the same things with the same arguments, you will always get the same result by computing the same sequence of actions at any time. So you can easily test your code or create reproducible error logs.\nThe default state is here because (spoiler alert) the Store dispatches any action to all reducers. So we need to return the current state if the treated action hasn’t any incidence on the current reducer.\nStore — Where all happens\nUntil here, we didn’t have code any Redux file. Because Redux is just the Store. This is where all the magic happens.\nA Store is an object which propagates actions in reducers and keeps the current state in memory. In Redux, you can also listen to any change in the Store with the subscribe() method.\nFor the bank, the Store is the system which handles operations. The Store calls the system, and the system updates accounts.\nTo create the Store, we will use a simple ES6 Class with 2 attributes: state to keep the last state of the application and reducers to keep the reducers of the application.\nclass Store {\n  constructor(reducers) {\n    this._reducers = reducers;\n    this._state = {};\n  }\n}\nThe next step is one of the biggest steps we will do: creating the dispatch function. This is the famous function which does all the job in Redux.\nThe algorithm is :\n\n1: Get all reducers\n2: Create an object NextState.\n3: For each reducer R with its name Name, call the reducer R and store its result in NextState[Name].\n4: Replace the previous this.state by NextState.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nYeah. That’s all. Nothing more.\nWriting this code is not really complicated. I use the Array.reduce() method to call each reducer and compute a new state.\nclass Store {\n  constructor(reducers) {\n    this._reducers = reducers;\n    this._state = {};\n \n    // Don&#039;t forget that because dispatch() can lose its context\n    this.dispatch = this.dispatch.bind(this);\n \n    // We also add a init call to create the default state of Store\n    this.dispatch({type: &#039;__INIT__&#039;});\n  }\n \n  dispatch(action) {\n    // Get all reducers names\n    const reducersNames = Object.keys(this._reducers);\n \n    // Compute the new current state of the application\n    //  by propagating the action\n    const nextState = reducersNames.reduce((newState, name) =&gt; {\n      // Just call each reducer with the current state of the reducer\n      //  and the action\n      newState[name] = this._reducers[name](this._state[name], action);\n \n      return newState;\n    }, {});\n \n    // Keep the new state in memory\n    this._state = nextState;\n  }\n \n  getState() {\n    return this._state;\n  }\n}\nI also added the getState() method which only returns the current state of the Store. To be Redux-compliant, we also need two things: subscribers and middlewares. We will not speak about middlewares: they are not extremely difficult to implement, but you don’t probably need them because you can add everything you need directly in your own version of Redux.\nFor friends of the Gang of Four, subscribers are a simple Observer pattern.\n// Long version for the Observer pattern. Go to the next comment if you don’t need it.\nAn Observer is one of the simplest patterns described in the Design Patterns book from Gamma, Helm, Johnson, and Vlissides (the Gang of Four), an OOP design patterns book. This pattern is also known as Listener or Subscriber.\nYou need at least two objects to use this pattern:\n\nthe Subject is the object we are waiting for information. When this object will do an update, it will send its new state to all Observers.\nan Observer is an object waiting for an update of the Subject. It will do something when the Subject tells him it has been updated.\n\nThis pattern allows to add and to remove any new Observer to the Subject at any time, so we have a low dependency between our objects.\nIn our case, the Subject is the Store.\nTo implement this pattern in Javascript, we only need to add a subscribe() method which will return the unsubscribe() method when we add a Subscriber and keep the new subscriber in an array of subscribers. And we must add the call to the subscribers when a new state is created.\n// End of long version for the Observer pattern.\nIn term of code for subscribers implementation, we got this.\nclass Store {\n  constructor(reducers) {\n    // ... \n \n    // New code\n    this.subscribers = [];\n  }\n \n  dispatch(action) {\n    // ...\n    \n    // New code : call each observer with the new state\n    this.subscribers.forEach((subscriber) =&gt; {\n      subscriber(this._state);\n    });\n  }\n \n  // New code\n  subscribe(subscriber) {\n    this.subscribers.push(subscriber);\n \n    // Return the unsubscribe function\n    return () =&gt; {\n      this.subscribers.splice(this.subscribers.indexOf(subscriber), 1);\n    };\n  }\n}\nNot a lot of code. That’s cool.\nAnd… you have your version of Redux.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tYou.\n\t\t\t\t\t\t\t\t\t\t\t\nEheh. Yes. Dan Abramov got 46000 stars on Github with this. Our prophet has one of the best number of lines/stars ratio of Github. (If you’re reading this and you’re Dan, please, I want a dedicated portrait of you on my desk. We can marry us too, but a portrait can be a good beginning.)\nTime to go to Redux++\nOk, we have the basis. But I’m sure you want to have at least one of the most complex feature to deal with Redux: asynchronous function handling.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMy brain. Your brain. Everyone’s brain reading that.\n\t\t\t\t\t\t\t\t\t\t\t\nIt’s ok. We will do this together. Without banned words like thunk and saga and any-way-to-do-async-without-doing-anything-but-I-never-understood-this.\nOur async handling system will use functions. We will consider that action can be a function instead of an object. This function will take the dispatch() method from the Store as parameter. So we can create an action that will call himself the dispatch() method when we need to dispatch a new action.\nconst ADD_AMOUNT_ON_ACCOUNT = &quot;ADD_AMOUNT_ON_ACCOUNT&quot;;\nconst REMOVE_AMOUNT_FROM_ACCOUNT = &quot;REMOVE_AMOUNT_FROM_ACCOUNT&quot;;\n \n// For the fun, it simulates the same process\n// than Paypal when you want to verify your account\nfunction verifyAccount() {\n  return (dispatch) =&gt; {\n    dispatch(removeAmountOnAccount(0.30));\n \n    // Simulate asynchronous treatment\n    setTimeout(() =&gt; {\n       dispatch(addAmountOnAccount(0.30));\n    }, 1000);\n  }\n}\nIn this case, we are just considering that any action which is a function is an Async Action. So we just have to check if the action in dispatch() is a function and call it in this case. Else, only do what we did before.\nclass Store {\n  // Just renamed the old dispatch to _dispatch\n  _dispatch(action) {\n    const reducersNames = Object.keys(this._reducers);\n \n    const nextState = reducersNames.reduce((newState, name) =&gt; {\n      newState[name] = this._reducers[name](this._state[name], action);\n \n      return newState;\n    }, {});\n \n    this._state = nextState;\n \n    this.subscribers.forEach((subscriber) =&gt; {\n      subscriber(this._state);\n    });\n  }\n \n  // New code\n  dispatch(action) {\n    if (typeof action === &#039;function&#039;) {\n      return action(this.dispatch);\n    }\n \n    this._dispatch(action);\n  }\n}\n5 new lines of codes. You can write only one line with a fat-arrow and a ternary operator.\nAnd now you are handling async functions.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tYou. Me. Everyone.\n\t\t\t\t\t\t\t\t\t\t\t\nThe best thing is you can write every system you want based on Redux. If you are totally Redux-compliant**, you can replace your current redux with your own new system in react-redux. That’s what we did on an internal project at KBDev.\nRedux is minimalist and magic. It’s the perfection.\nI’m not sure for this statement.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tYou.\n\t\t\t\t\t\t\t\t\t\t\t\nHmm yes, I wrote this article on Redux and I’m saying that this library is not a solution for all problems.\nWe must think about a few things.\nFirst, if you are using React, there’s a lot of API features which will be soon added. Just take a look at the Context API, the Suspense API or the amazing Hooks API. All of these APIs are solutions for problems where Redux was used.\nSecondly, in an article named You Might Not Need Redux from our lord Dan himself, he wrote we perhaps need Redux because we don’t have understood how to code with React.\n\nHowever, if you’re just learning React, don’t make Redux your first choice.\nInstead learn to think in React.\nCome back to Redux if you find a real need for it, or if you want to try something new. But approach it with caution, just like you do with any highly opinionated tool.\nIf you feel pressured to do things “the Redux way”, it may be a sign that you or your teammates are taking it too seriously. It’s just one of the tools in your toolbox, an experiment gone wild.\n\n{% include image.html url=“/assets/images/danAbramov.jpeg” description=“The Lord and Saviour of the Earth.” %}\nThirdly, I wrote this article to prove you that you don’t always need to do an npm install each time. A lot of libraries are just some concepts you can recreate and complete with your needs.\nLastly, Redux must be appreciated like a design pattern instead of a library. We need to remember how we can create some simple state management software with reducers. You can reuse this pattern to make internal reducers for components or anything else. For example, I’ve done an HTTP fetch hook based on an internal reducer. And it works like a charm.\nHere’s an example I wrote;\nWe need to remember that we can invent things. I’m sure if you have read this article you are interested in how software pieces work. On how can we create complex systems with just some lines of code. That’s what we have to do: always learn new and efficient ways to do a better job. And that’s the magic of our job: we are paid to hit our f***ing keyboard to display rainbows and unicorns on all screens of the universe. And that’s cool! So let’s do some great unicorns instead of evil and ugly dead hell pony!\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nThere’s a Github repository with all the code of this article and my own Typescript special version of Redux called Zebulon. All are available here: Redux-Recoded repository. You can use this code in your projects. And if you have some questions, just ask them in comments, I will try to answer them.\nThanks a lot for reading! :)\nAnd thanks for Jean Batista and Jérémy Turon for correcting my bad English."},"Dev/Infra/Mise-en-place-d'un-Grafana-pour-gérer-les-métriques-de-CleverCloud":{"title":"Mise en place d'un Grafana pour gérer les métriques de CleverCloud","links":[],"tags":["monitoring","grafana","clevercloud","devops"],"content":"Mis à jour (25/08/21) : Aurélien Hebert, développeur chez CleverCloud, nous a partagé un dépôt Git pour déployer un Grafana directement sur CleverCloud. Nous vous le partageons donc si vous cherchez une autre solution rapide pour avoir un Grafana (disponible ici). Merci beaucoup Aurélien pour le partage ! :)\nDés que vous commencez à avoir une prod et faire des micro-services, un point devient vite essentiel : suivre toute l’activité de chacun de vos services. C’est une chose essentielle : délivrer un produit de qualité signifie aussi suivre sa santé et prévenir d’éventuels problèmes plutôt que de les guérir quand la prod’ est en feu (pensez à OVH pour l’exemple).\nPour notre gros projet d’ERP, nous travaillons avec CleverCloud pour toute la prod’ et la pré-prod’. C’est assez génial : vous créez un projet sur leur web-app, vous poussez votre code sur un dépôt Git, et v’la le code qui est déployé tout seul. Vous avez aussi des possibilités de configuration de build plus avancées, de la scalabilité horizontale et verticale, un load balancer qui se débrouille comme un grand, bref, c’est assez génial pour lancer des projets rapidement sans devoir sécuriser les environnements de prod’ en permanence. Et, en plus, vous n’utilisez pas AWS, ce qui permet de faire perdre de la thune à l’autre mégalomaniaque.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tLa scalabilité via CleverCloud\n\t\t\t\t\t\t\t\t\t\t\t\nLe gros défaut de CleverCloud est que l’interface des métriques restent très limitées. Vous avez l’essentiel, mais dés qu’il s’agit de choses précises ou de voir les métriques de tous vos services, c’est à vous de le mettre en place. C’est un peu relou, surtout quand, comme moi, vous n’êtes pas à la page des solutions intéressantes de monitoring. Pour leur défense, une des personnes du support m’a informé qu’iels étaient en train de travailler sur un Grafana hébergé sur CleverCloud avec l’accès à toutes les métriques de toutes les applications. Ça va être cool, mais, en attendant, on en a monté un de notre côté.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tLes métriques disponibles sur CleverCloud\n\t\t\t\t\t\t\t\t\t\t\t\nÉtude de l’existant : qui c’est qui sait faire du monitoring ?\nLa première chose à faire avant de mettre en place une solution, c’est de la trouver. Parmis nos critères, nous avions :\n\nune solution qui fait du monitoring,\nune solution qui est open-source.\n\nZabbix\nAu travers de ces très nombreux critères, notre première réflexion nous a menée vers Zabbix. Forcément, on a monté un serveur Zabbix, on a ajouté des agents sur diverses machines pour récupérer les métriques des machines, on a fait un dashboard qui affiche ces métriques et des seuils d’alertes.\nLe principal problème de Zabbix est que c’est un écosystème à part entière. Même en étant issu d’un cursus universitaire en informatique puis avec quelques années d’expérience derrière moi en tant que développeur, j’étais perdu. Zabbix est une solution qui va vous dire “RTFM” à chaque écran, et si vous n’êtes pas content·e, vous n’avez qu’à contacter le support (évidemment payant, on vend du service maintenant ma bonne dame).\nUne fois les configurations passées de certaines machines, nous remarquons un autre problème : il n’y a pas moins d’interconnecter Zabbix avec CleverCloud, car Zabbix ne prend pas en charge les différents options d’export de métriques de CleverCloud (c’est-à-dire Warp10).\nArrivé à ce stade, il était certain que Zabbix n’était pas un bon choix. Après une réinstallation du serveur, nous sommes lancé·es à présent vers notre deuxième choix : Grafana.\nGrafana\nLa stack Grafana est un peu particulière, car là où Zabbix couvrait l’intégralité de la solution de monitoring, Grafana n’est que la partie visuelle du monitoring. Du coup, Grafana utilise des datasources pour récupérer les données et les afficher.\nTrès généralement, les gens utilisent comme datasource un Prometheus pour stocker des données, puis ensuite les récupérer et les afficher via Grafana. Vous pouvez aussi ajouter d’autres datasources via des plug-ins Grafana, dont notamment, dans notre cas, un plug-in pour Warp10.\nDans les choses intéressantes de Grafana, il y a notamment le fait que vous pouvez faire différents widgets de visualisation et les utiliser sur les tableaux de bord que vous souhaitez, ou mettre des alertes sur différentes métriques importantes pour vous.\nBref, ça semble pas mal, donc on va monter tout ça.\nMise en place de la stack Grafana\nComme tout bon développeur·euse, j’ai la flemme. Surtout que ce n’est pas si simple de comprendre, au début, que Grafana peut être monté sans Prometheus, mais que c’est pas mal de l’avoir, puis aussi vaut mieux avoir AlertManager.\nBref, si vous voulez avoir un truc qui marche rapidement, un développeur nommé [vegasbrianc] a préparé un petit dépôt Git avec tout le nécessaire de base pour monter la stack de vos rêves rapidement. Tout est disponible ici.\nLes prérequis sont Docker, Docker Compose et Docker Swarm (normalement installé avec Docker).\nEt vérifiez que docker est lancé correctement. Si vous êtes sur un Linux et que ça ne marche pas, vous avez dû oublié ces étapes de post-installation.\nCloner le dépôt\ngit clone https://github.com/vegasbrianc/prometheus\n\nModifier le mot de passe par défaut et ajouter le plug-in Warp10\nModifiez le fichier &lt;git_repo_root&gt;/grafana/config.monitoring avec les informations suivantes :\n\nGF_SECURITY_ADMIN_PASSWORD=monsupermotdepasse → choisissez votre mot de passe du compte admin en mettant quelque chose de solide.\nGF_USERS_ALLOW_SIGN_UP=false → si vous ne voulez pas que des personnes puissent créer des comptes utilisateurs en s’inscrivant sur votre Grafana.\nGF_INSTALL_PLUGINS=ovh-warp10-datasource → pour ajouter le plug-in Warp10 à Grafana.\n\nDémarrer la stack\nHOSTNAME=$(hostname) docker stack deploy -c docker-stack.yml prom\n\nVérifier que tout fonctionne\nSi tout a fonctionné correctement, vous devriez avoir un Grafana à l’adresse http://&lt;Host IP Address&gt;:3000.\nVous pouvez vous y connecter avec l’utilisateur admin et le mot de passe que vous avez choisi précédemment.\nUne fois que tout marche et que vous êtes connectés à votre Grafana, il y a quelques étapes supplémentaires pour sécuriser votre serveur Grafana (notamment si vous voulez l’utilisez en production).\nOptionnel - Sécuriser la stack\nSupprimer les accès extérieurs à Prometheus et Alertmanager\nModifiez le fichier &lt;git_repo_root&gt;/docker-compose.yml en supprimant les ports des services prometheus et alertmanager.\nÀ l’heure où ces lignes sont écrites, il s’agit des lignes - 9090:9090 et - 9093:9093.\nAjouter le HTTPS\nLast but not least, vous pouvez ajouter le HTTPS à votre Grafana pour éviter des MitM et autres cyber-joyeusetés.\nLa documentation propose d’utiliser nginx-proxy, mais vu que les containers Docker tournent avec Swarm, je n’ai pas réussi à faire fonctionner ce dernier (car nginx-proxy n’arrive pas à redémarrer les containers et mettre à jour leurs configuratons).\nDu coup, j’ai juste monté un nginx en amont avec la configuration suivante :\nupstream grafana {\n    server 127.0.0.1:3000;\n}\n\nserver {\n  \tlisten 80;\n  \tlisten [::]:80;\n\n  \tserver_name mondomaine.org;\n  \treturn 302 https://$server_name$request_uri;\n}\n\nserver {\n    listen    443 ssl;\n    listen [::]:443 ssl;\n\n    ssl_certificate  /etc/ssl/cert.pem;\n    ssl_certificate_key /etc/ssl/key.pem;\n\n    server_name    mondomaine.org;\n\n    access_log /var/log/nginx/reverse-access.log;\n    error_log /var/log/nginx/reverse-error.log;\n\n    location / {\n        proxy_pass http://grafana;\n    }\n}\n\nVous pouvez mettre uniquement la configuration HTTP (80) de base puis mettre un coup de certbot, ça marche aussi bien.\nNote : si jamais vous remarquez que votre Grafana perd de temps en temps des paquets avec 60s de timeout, c’est probablement que vous avez écrit un truc du type :\nupstream grafana {\n    server localhost:3000;\n}\n\n… et que vous tombez dans le cas de ce bug très étrange. Il vous suffit alors de remplacer localhost par 127.0.0.1.\nUtiliser Grafana avec CleverCloud\nAjouter la datasource\nPour ajouter l’une de vos applications CleverCloud à Grafana, il vous suffit de créer une nouvelle datasource en Warp10, et de renseigner les informations suivantes :\n\nHTTP Address - URL : https://c1-warp10-clevercloud-customers.services.clever-cloud.com/\nAdd a constant : Name : token - Value : récupérer le token d’authentification dans la vue Metrics sur CleverCloud &gt; Metrics Token, collez-le dans Value, puis appuyez sur le bouton Add.\n\nVous pouvez alors sauvegarder votre datasource.\nCréer un widget\n\nCréez un nouveau tableau de bord sur Grafana, puis créez un nouveau widget.\nSélectionnez votre Warp10 en datasource.\nFetch Data - Read token : $token → cela va utiliser la variable que vous avez défini dans la définition de votre datasource.\nFetch Data - Metric name : cpu.usage_user → la liste des métriques est disponible ici.\nLabels - Key : cpu - Value : cpu-total → ce label est nécessaire dans le cadre d’une requête sur cette métrique.\nLabels - Key : app_id - Value : &lt;votre_app_id&gt; → sur CleverCloud, sélectionnez votre application, et récupérez le contenu du champ en haut à droite).\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tLe token de Metrics\n\t\t\t\t\t\t\t\t\t\t\t\nLe seul bémol de cette solution est que le token disponible sur la page des Metrics de CleverCloud est valable 5 jours. Vous pouvez récupérer un token de 30 jours via un appel à l’API, mais il faudra tout de même le mettre à jour à intervalle régulier. CleverCloud prévoit de corriger ce problème avec l’arrivée de Grafana sur leur plate-forme.\nDans la partie à droite de la création d’un widget Grafana, vous pouvez modifier le style de widget, changez les échelles, mettre des seuils, etc.\nVous pouvez aussi aller dans l’onglet Transform pour appliquer des transformations à vos jeux de données pour obtenir le résultat que vous souhaitez.\nUne fois ceci fait, vous pouvez appuyer sur Save en haut à droite, et si tout est bien configuré, vous obtiendrez un petit graphique de l’état de votre CPU sur votre application. Si vous avez 2 machines sur votre application, vous arez 2 courbes.\nEn jouant un peu avec Grafana, nous sommes parvenus à ce résultat :\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tLe premeir dashboard de monitoring\n\t\t\t\t\t\t\t\t\t\t\t\nVous pouvez aussi vous servir de Grafana pour rajouter des métriques sur vos DBs, sur vos applications, ou même faire des tableaux de bord orientés business ou marketing via les plug-ins Google Sheets.\nEt Grafana possède un Cycle view mode permettant l’affichage uniquement du dashboard, ce qui peut être utilisé pour faire des écrans de contrôle à destination des équipes de développement ou autre.\n\nMerci de nous avoir lu ! Nous espérons que vous parviendrez à faire des choses incroyables avec Grafana ! Bon été ! :)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMerci de votre lecture ! &lt;3\n\t\t\t\t\t\t\t\t\t\t\t"},"Dev/Non,-on-ne-forme-pas-une-développeuse-ou-un-développeur-en-6-mois":{"title":"Non, on ne forme pas une développeuse ou un développeur en 6 mois","links":[],"tags":["formation","développement","critique"],"content":"Avant toute chose, je tiens à préciser qu’il s’agit d’un point de vue complètement personnel. Cet article est issu d’un ensemble d’expériences rassemblées au cours de mes années de travail en tant que Directeur Technique et Tech Lead d’une petite entreprise bordelaise, mais aussi formateur et conférencier. Je me sers aussi de beaucoup de discussions partagées avec des confrères et consoeurs de postes différents : responsables de formation, formateurs et formatrices, tech leads, CTO, alternants et alternantes, intervenants, développeurs et développeuses, recruteurs et recruteuses.\nPour clarifier les choses, je suis autodidacte. J’ai ensuite enchaîné sur un BTS IRIS puis un Master Génie Logiciel à l’Université de Bordeaux. De fait, mon avis est forcément biaisé par mon cursus. J’essaierai au maximum de conserver un angle objectif en me basant sur les faits de mon expérience professionnelle mis en corrélation de la recherche et des faits existants, et je m’excuse par avance si l’objectivité de certains arguments laissent à désirer.\nEnfin, mon expérience et ma vie étant liée à la ville de Bordeaux, je me prononcerai en priorité sur le contexte bordelais.\n\nLes formations “courtes” représentent aujourd’hui une voie de formation principale dans le domaine de l’informatique (principalement le développement Web). Las des Universités, IUT, BTS et autres écoles d’ingénieurs, les nouveaux développeurs et les nouvelles développeuses se tournent vers de nouvelles formations plus courtes pour entrer dans le monde paradisiaque du développement Web. Mais est-ce que ces formations suffisent réellement à former des développeurs et des développeuses ? Spoiler : non.\nContextualisation des formations courtes\nPour comprendre comment la situation actuelle s’est créée, il faut d’abord comprendre l’histoire de la formation dans l’informatique et la mettre en corrélation avec l’histoire de l’informatique en tant que travail en France.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tLe site du Zéro, temple disparu de l&#039;initiation au développement\n\t\t\t\t\t\t\t\t\t\t\t\nÀ une époque où la navigation “sur la toile” s’effectuait au moyen d’Internet Explorer (qui est maintenant définitivement mort, RIP), où les pages persos étaient là sans jamais devenir les blogs, où les rares webmestres devaient acheter des livres pour apprendre à coder, un certain M@teo21 décide de créer un site permettant à n’importe qui d’apprendre à coder facilement : le Site du Zéro. Ce drôle de site où des passionné•es écrivaient des cours de développement a été une initiation formidable au doux monde du développement, d’abord pour moi, mais aussi pour un nombre non négligeable de connaissances. Le site connut un large succès, et plusieurs années plus tard, il devînt un site dédié à la formation courte : OpenClassrooms.\nLe modèle change, la rédaction se professionnalise, et l’État autorise alors OpenClassrooms à délivrer des diplômes en échange de formations payantes. En parallèle, une success story donnant des idées à d’autres, des nouvelles écoles s’ouvrent. On découvre alors, sur Bordeaux, des nouvelles écoles innovantes comme la Wild Code School (2013), le Wagon (2015), la Capsule (2016), la Piscine (2017), 3WRH (2018), ou encore Holberton School (2021) pour ne citer que les plus célèbres.\nLe principe est toujours le même : effectuer une formation intensive pour entrer dans le monde de la tech, réputé pour son confort de travail et ses hauts salaires.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tUn extrait des &quot;quelques&quot; formations courtes en développement\n\t\t\t\t\t\t\t\t\t\t\t\nBien évidemment, les écoles de formation font face à une demande réelle : l’explosion de la demande dans la tech. Internet a vécu un essor formidable depuis ses débuts, voyant ses 16 millions d’utilisateurs en 1995 devenir 5 382 millions en 2022. Les usages se sont multipliés : les utilisateurs d’Internet discutent, découvrent et consomment, faisant d’Internet un marché pesant 4 900 milliards de dollars, et ce uniquement pour l’e-commerce. Les sites web sont devenus des applications performantes et riches en fonctionnalités, propulsées pour beaucoup par l’essor des start-ups en recherche d’un produit innovant à vendre. Les smartphones se sont démocratisés, si bien que, en 2021, 77% de la population âgée de 15 ans ou plus en était équipée, créant un marché de l’application mobile auparavant inexistant. Les appareils connectés ont atteint le doux nombre de 16,7 milliards d’objets actifs en 2023, et le récent essor de l’intelligence artificielle permet à n’importe quel personne dotée d’un clavier de remporter des concours d’art.\nDevant la lenteur des formations “classiques” et la montagne d’offres d’emploi des domaines du développement, quelques entrepeneur•euses ont décidés de répondre plus rapidement à la forte demande en créant des formations plus courtes, plus intensives, mais aussi plus chères. Garantissant un emploi à la sortie, ces formations font de plus en plus d’adeptes, qu’il s’agisse d’étudiants post-bac ou de reconversions professionelles. Cependant, quels sont les arguments de ces formations pour pouvoir atteindre un résultat aussi rapidement et aussi bon (selon elles) ?\nPhilosophies et méthodes de la formation courte\nL’innovation est le mot d’ordre de ces formations next-gen, dont le discours et les méthodes suivent non-exhaustivement ces préceptes :\n1 - Les écoles traditionnelles françaises ne forment pas correctement\nQuoi de mieux pour passer pour un type intelligent et malin que de dire que l’on disrupte le système éducatif français qui ne marche pas ? C’est notamment le discours qu’a tenu Xavier Niel lors de l’ouverture de 42 en 2013, et qui est repris par les nouvelles écoles pour crédibiliser leurs méthodes de formation.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tXavier Niel, pionnier de la décridibilisation des formations &quot;classiques&quot; en informatique\n\t\t\t\t\t\t\t\t\t\t\t\nLà où tout semblait formidable et cohérent en 2013, les fissures de ce modèle révolutionnaire commençait déjà à apparaître en 2018, rassemblant harcèlement et arnaques. En dehors des faits journalistiques, et de discussion en discussion avec d’autres professionel•les, les anciens élèves de 42 ont tendance à exacerber les défauts des anciens élèves d’écoles d’ingénieurs privées : peu de remise en question, difficile à gérer, peu de soft skills, ou encore une tendance à rendre le travail en équipe compliqué.\nDans le cas des formations courtes, cet argument sert beaucoup plus à défendre une vision différente de la formation visant à mettre en avant la pratique plus que la théorie. Dans le domaine, on appelle ça apprendre à pisser du code.\nSi cela semble une bonne idée au premier abord, il faut d’abord revenir sur une conjecture primordiale : l’informatique est un domaine qui évolue très rapidement. Tellement rapidement que la pratique apprise en 2024 a une chance non négligeable de tomber en désuétude dés 2030. C’est notamment pour cette raison que beaucoup d’écoles traditionnelles continuent de former à la théorie et donc aux bases de l’informatique. Les personnes qui connaissent la théorie ont beaucoup plus de facilité de s’adapter à de nouvelles choses, et, mieux encore, peuvent utiliser les théories de base pour concevoir de nouvelles théories et de nouveaux outils, donc innover.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nPour illustrer ce principe, il suffit de se pencher sur l’innovation actuellement à la mode : l’intelligence artificielle. Derrière ce concept fourre-tout se cache l’utilisation des réseaux neuronaux qui permettent d’apprendre et de répéter des choses. Si l’essor de l’intelligence artificielle a été durant ces 5 dernières années, le concept des réseaux neuronaux a été détaillé initialement dans un papier scientifique de 1967 nommé Cybernetics and Forcasting Techniques - A. G. Ivakhnenko &amp; Valentin Grigorʹevich Lapa. Sans connaître la théorie, il n’y aurait donc pas eu d’intelligence artificielle de la façon dont on la connaît aujourd’hui.\nDans un contexte technique plus avancé, les personnes qui connaissent les patrons de conception (par exemple, ceux du Gang of Four) sont plus propices à construire des solutions logicielles plus maintenables, comprendre plus facilement des technologies ou des langages qui reposent sur ces patrons ou même communiquer plus efficacement, étant donné qu’iels possèdent des éléments de langage basiques et communs au domaine. Par cette connaissance, ces développeurs et ces développeuses seront bien plus “productifs” que leurs équivalent•es formé•es uniquement à la pratique.\n2 - Pas de professeurs : les étudiants sont des mentors\nLe discours est simple : si on est capable d’enseigner, c’est que nous avons parfaitement compris la chose. C’est une philosophie que je partage complètement et que je pratique régulièrement sur différents sujets.\nNéanmoins, là où les nouvelles écoles se targuent de cette philosophie comme solution miracle, il semble beaucoup plus pertinent d’y voir une optimisation des coûts plus qu’une idéologie : pourquoi payer des professeur•es alors qu’on pourrait se servir des élèves ? Cette méthode a et est toujours utilisée par l’école Epitech dans laquelle les étudiant•es d’années supérieures vont former les 1ère années, officiellement pour que les élèves évoluent plus vite et créer de la cohésion (un terme alternatif à celui de broculture), officieusement pour réduire les coûts de formation et augmenter au maximum le bénéfice au détriment de la qualité de formation.\nSur un autre plan, l’absence de professeur implique que, si les élèves-mentors sont incapables de répondre à une question, la réponse viendra très probablement d’Internet. D’expérience, les élèves ont souvent des questions pertinentes qui nécessitent un retour d’expérience : pourquoi utiliser telle technologie et pas celle-ci ? Comment fonctionne telle architecture et est-ce que c’est adapté à ce projet ? Est-ce qu’il y a des cas dans lesquelles telle solution n’est pas intéressante ? Toutes ces questions nécessitent un point de vue expérimenté, au-delà des 3/5 années d’études pour les formations sérieuses, donc encore plus loin pour les formations courtes.\nEnfin, les enseignements de type mentorat / tutorat ont leurs avantages mais aussi leurs inconvénients : compétence du mentor (plus que questionnable ici), manque de formation et/ou de pédagogie du mentor, ou encore possibilité de détourner le mentorat à des fins personnels (exemple : une élève se retrouve en danger car un mentor fait du chantage à des fins immondes). Les avantages de cette méthode d’enseignement n’ont également pas été prouvés, comme le constate Roxane Bricet et Héloïse Lucas dans leur état des lieux sur le mentorat.\n3 - Vous décrocherez un poste dans les meilleures entreprises tech\nToute personne initiée à la communication sait que la promesse de résultats est une technique efficace pour que les personnes passent à l’achat. Vous vous renseignez sur un régime ? Regardez les photos de ces personnes qui ont perdus 27 kg en 2 semaines. Vous souhaitez acheter une tondeuse à gazon ? Admirez ce magnifique jardin que vous aurez grâce à cet achat. Un sèche-cheveux ? Des cheveux dignes des plus grands coiffeurs et coiffeuses.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tPublicité pour un sèche-cheveux Dyson\n\t\t\t\t\t\t\t\t\t\t\t\nDe fait, la tech est un domaine qui attire : nous avons des salaires très élevés (3970€/mois en moyenne) , des conditions de travail formidables avec le travail distanciel ou même en devenant digital nomade, et, bien évidemment, nous vivons de notre passion. Et oublions les burnouts, épuisements mentaux et autres dépressions : comment travailler derrière son bureau toute la journée pourrait être un métier difficile ?\nDu point de vue des entreprises, oui, il y a des postes à pourvoir. Cependant, le secteur de la tech recherche essentiellement des profils seniors aujourd’hui. On peut effectivement taxer les entreprises de ne pas vouloir former des juniors, mais le problème peut s’expliquer en 2 points :\n\nbeaucoup de formations courtes existent aujourd’hui, donc beaucoup plus de profils juniors sont disponibles sur le marché. Il y a 4 ans, lorsque j’ai fait un recrutement d’un profil junior, j’ai eu la surprise de recevoir environ 50 CVs en 48 heures, alors même que nous étions une toute petite entreprise et peu connue. J’ai eu l’occasion de confirmer ce point avec des confrères et consoeurs qui ont également reçu beaucoup de CVs à la création d’un poste de junior. Par conjecture, le secteur de la tech semble aujourd’hui très bouché pour les profils “ultra-juniors” (c’est-à-dire avec moins de 3 ans de formation).\nles profils “ultra-juniors” sont formés en 6 mois, donc uniquement sur un langage et une techno spécifique, mais sans avoir de socle théorique nécessaire pour évoluer correctement dans le métier. On pourrait dire que ces personnes sont des ”profils jetables”, étant donné qu’à la moindre évolution, iels ne pourront se maintenir à niveau sans difficulté.\n\nDe plus, dans le cas où les entreprises recherchent des profils juniors, les élèves de formations courtes se retrouvent alors en concurrence avec les élèves de formations classiques (Bac +3 à +5) issues des IUTs, universités ou écoles d’ingés publiques et privées. Comment est-il possible de rivaliser avec des personnes qui ont eu 6 à 20 fois plus de temps pour se former ? Réponse : on ne peut pas.\n4 - C’est un bootcamp / une formation intensive\nPour justifier des périodes 6 à 20 fois plus courtes que les formations classiques, il faut forcément trouver une méthode miracle. Celle-ci existe pourtant depuis des années dans les classes préparatoires françaises : le bourrage de crâne le rythme intensif de travail.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tUn bootcamp sûrement intensif - Image de The Muse\n\t\t\t\t\t\t\t\t\t\t\t\nEn recherchant des études pour déterminer l’efficacité d’une formation intensive par rapport à une formation classique, je suis tombé sur deux études :\n\ncelle de John V. Kucsera et Dawn M. Zimmaro de 2010 sur un ensemble varié de formations,\ncelle de Harwood, K.J., McDonald, P.L., Butler, J.T. et al. de 2018 sur des étudiant•es de la santé.\n\nLa conclusion des deux études est exactement la même : aucun résultat ne permet d’affirmer que les formations intensives sont moins efficaces que les formations classiques. De fait, une formation intensive est capable d’obtenir les mêmes résultats qu’une formation classique deux fois plus longue (cf. la 2ème étude).\nUne question reste cependant sur la longueur condensable par une formation intensive, et, malgré tous les efforts du monde, je doute sur le fait qu’on peut condenser 2 ans de formation sur 6 mois. D’expérience, les élèves ont besoin de temps pour emmagasiner l’information sur le long terme et éviter les effets néfastes du bachotage (provoquant une rétention temporaire et réduite des informations).\n5 - La formation ne vous coûtera rien\nEffectivement, c’est une réalité : faire une formation courte ne coûte généralement pas d’argent personnel. Si les formations courtes se sont développées aussi vite que les punaises de lit à Paris, la raison est justement que les personnes qui créent ces formations connaissent toutes les aides et les méthodes d’obtention de celles-ci.\nC’est assez simple : on construit des formations que l’on fait certifié par Qualiopi (surtout long administrativement), puis on devient éligible au CPF, aux contrats d’apprentissage et de professionnalisation (en fonction du plus rentable pour l’année en cours), à la Préparation Opérationnelle à l’Emploi, à l’Action de Formation Préalable au Recrutement et à l’Aide Individuelle à la formation. En parallèle, on peut deviner que ces entreprises sont subventionnées par les aides aux organismes de formations (par exemple), mais aucune information n’est disponible pour valider cette hypothèse.\nConséquences et problèmes de la formation courte\nExploitation des juniors\nNous avons déjà abordé l’une des conséquences principales de ces formations qui est la création d’un bouchon important sur le marché du développement avec une quantité trop importante de profils juniors.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tAnother brick in the Wall Part. 2 de Pink Floyd\n\t\t\t\t\t\t\t\t\t\t\t\nLes différentes ESNs (Entreprises de Services du Numérique) nationales sont pleinement au courant de cette information, et n’hésite pas à utiliser ce trop-plein de développeur•euses à leur avantage. Différentes discussions m’ont notamment appris qu’une entreprise commençant par C et finissant par i avait ouvert un plateau (appelé un “vivier de talents”) dont l’objectif est de se servir des profils “ultra-juniors” pour corriger tous les tickets mineurs de leurs projets, et envoyer les tickets à des équipes plus qualifiées si le ticket est trop complexe. Dans le cas où une personne n’est plus apte (burn-out, dépression, …), il suffit de la remplacer par un autre profil “ultra-junior”.\nBeaucoup d’autres ESNs effectuent ce genre de pratiques de façon plus ou moins variée : un junior est placé comme seul développeur sur un projet avec, comme support, un tech lead disponible 10 minutes par jour, et bien évidemment vendu au tarif d’un senior. Puis, si jamais il lâche, il sera remplacé par un autre. On peut même faire des groupes de 2 à 3 juniors si jamais le client est un peu plus important !\nEn soit, il s’agit d’une variante bien connue dans les entreprises de l’utilisation des alternant•es et stagiaires comme travailleur•euses, sauf que cette nouvelle version est totalement légale.\nNon-sélection des profils à l’entrée\nVu que l’on parle de formation courte et intensive, on pourrait penser que les écoles pratiquent une sélection pour homogénéiser le niveau de base des élèves. En discutant avec un ancien formateur, j’ai eu l’occasion d’apprendre que, lors de l’ouverture d’une école sur Bordeaux, il y avait effectivement des sélections, ce qui a disparu dés la seconde promotion. L’explication est bien évidemment que plus de personnes implique plus d’argent, mais ce n’est pas réellement là le problème.\nQuand vous formez des personnes, plus un groupe est hétérogène, plus la formation sera compliquée. Par exemple, quand vous entrez en première année d’informatique en Université, il y a aujourd’hui un pourcentage important de personnes qui ont fait la spécialité NSI (Numérique et Sciences Informatiques) dans leur Bac. Cela signifie que, dans votre enseignement, vous pouvez partir du postulat que les étudiant•es connaissent le principe d’une boucle ou d’une condition et passer rapidement dessus. Dans le cas où aucune connaissance de départ ou d’affinité particulière n’est partagée, vous devez donc vous adaptez en permanence vos cours en partant du niveau le plus bas du groupe (donc rien) et réussir à vous adapter à des personnes extrêmement différentes par leurs compétences, leurs motivations et leurs présences.\nSi ce n’est normalement pas un problème dans les formations traditionnelles, cela en devient un dés que la formation est censée être intensive, et donc que la formation doit être rapide et efficace, ce qui est incompatible, de mon point de vue, avec la présence d’absolument n’importe quel personne qui aurait juste payé la formation.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tChaos Theory de Shahid Zuberi (2023)\n\t\t\t\t\t\t\t\t\t\t\t\nSous-qualification des formations\nPrécédemment, nous avons vu que la formation intensive peut être aussi efficace qu’une formation plus longue. Cependant, nous restons sur des formations offrant des compétences de technicien•es / codeur•euses, malgré le fait que ces formations promettent des compétences de développeur•euse full-stack. Soyons francs : même un Bac+5 n’est pas un bon full-stack.\nIl faut aussi considérer la période que nous vivons : l’essor des intelligences artificielles provoquent l’obligation d’une réflexion sur notre approche au travail (ce qui curieusement, ressemble à mon essai de 2019 sur la conception du travail). Les métiers nécessitant “moins de capacités intellectuelles et créatives” sont menacés comme l’ont été les métiers nécessitant “moins de capacités physiques” lors du début de l’essor de la robotique. Et parmi ces métiers, celui de codeur est ouvertement menacé. Pour illustrer ce propos, il suffit de voir ce post Reddit d’une personne qui a construit une application Web sans écrire la moindre ligne de code grâce à GPT4. On peut donc poser une question simple : à quoi va servir le métier de codeur ?\nSauf si vous allez être recruté•e pour faire de la TMA (Tierce Maintenance Applicative) sur des applications codées par des IAs ou sur des applications bancaires que personne ne veut maintenir (le temps que GPT apprenne le COBOL), vous n’aurez plus de travail. Le travail dans l’informatique sera de plus haut niveau : architecturer les applications et les infrastructures, vérifier la sécurité d’une application ou faire fonctionner des ordinateurs quantiques, bref, des choses qu’aucune formation courte n’enseigne aujourd’hui.\nComment se former au développement\nBeaucoup de personnes posent régulièrement cette question, donc je vais essayer de détailler un peu les possibilités.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nVous êtes bachelier et vous voulez et pouvez faire des études plus longues\nVisez au minimum un BUT (Bac +3). Cette formation assurée par les IUTs est accessible et professionnalisante, et vous disposerez d’un premier bagage solide de savoir. Il est à noter que le BUT est uniquement à visée professionnelle et ne permet pas de faire un master après (a contrario de l’ancienne Licence Pro qui pouvait amener parfois à un Master sur dossier).\nSi vous souhaitez rentrer dans des domaines plus précis (cryptographie, traitement de l’image et du son, informatique fondamentale, IA, génie logiciel, etc.), faites une Licence puis un Master en Université ou en école d’ingénieur publique. Ces formations sont accessibles et vous permettront d’avoir beaucoup de connaissances avec des enseignants-chercheurs (pas forcément pédagogues par contre) pour ensuite évoluer en toute sérénité. C’est aussi le moyen d’entrée pour pouvoir faire un doctorat.\nIl est aussi possible de bifurquer vers un Master MIAGE (Informatique et Gestion) pour avoir une double compétence et un master en alternance (chose qui n’existe que très peu).\nSi vous estimez que la théorie ne vous intéresse absolument pas, vous pouvez voir les écoles d’ingénieur privées (Epitech, SupInfo, Cesi, Ynov, etc.) qui coûtent au minimum 6 000 à 7000€ l’année. Il me semble que certaines écoles proposent des formations en alternance sur toutes les années pour le financement, mais, pour y avoir été intervenant, la qualité de l’enseignement n’est pas forcément à la hauteur de l’argent (une fabuleuse histoire de support de cours fourni par une école qui était complètement désuet).\nEnfin, vous pouvez toujours vous laisser tenter par une formation courte, mais conservez un oeil critique envers ces formations. Avec certain•es de mes alternant•es, on a déjà eu des soucis de personnel qui change constamment, de cours qui sautent sans prévenir, bref, c’est loin d’être votre meilleure option.\nVous êtes en réorientation professionnel\nForcément, cela signifie que vous êtes déjà dans la vie active, donc que vous avez besoin de pognon pour vivre.\nVérifiez d’abord toutes les aides possibles (AIF, POE, AFPR, …). N’hésitez pas à consulter un•e conseiller•e Pôle Emploi France Travail, iels ont potentiellement des pistes en plus dont j’ignore l’existence.\nEnsuite, en fonction de vos revenus, votre compte en banque et des aides possibles :\n\nsi vous avez assez d’argent, un BUT dans un IUT est très intéressant.\nsinon, regardez les formations avec de l’alternance (donc l’entreprise paiera votre formation). Généralement, ça va être des formations courtes privées, mais vérifier malgré tout dans les IUTs, universités et écoles d’ingénieur s’il y a des choses qui peuvent se faire en alternance. Et, au cas-où, vous pouvez consulter la grille de rémunération minimale des apprentis ici.\n\nUne troisième solution existe : être autodidacte. L’informatique est un domaine pour lequel une énorme quantité d’informations est disponible sur Internet. C’est un chemin plus ardu, mais vous êtes complètement autonome, vous pouvez progressez à votre rythme, avec vos projets, et continuer en attendant à vivre avec votre travail rémunéré.\nMême si vous n’avez pas de diplôme, si vous êtes devenu quelqu’un de compétent, vous pouvez réussir à obtenir des entretiens via les différents événements liés à la tech (je pense notamment à toutes les sauteries les rencontres de la French Tech par exemple). Par contre, c’est très vivement conseillé de savoir ou d’apprendre à parler anglais.\n\n26/02/24 - Mise à jour concernant l’autodidaxie : un commentaire sur LinkedIn de la part de Radu Mihnea Ciobanu mentionne l’open-source en tant qu’approche autodidacte, et c’est effectivement une approche extrêmement intéressant.\nPour faire simple, le principe de l’open-source est de créer des projets et publier le code sur des serveurs de versionnage (git pour le plus utilisé aujourd’hui). D’autres personnes peuvent alors participer à ce projet en modifiant le code pour répondre à des besoins ou corriger des bugs. Cela peut aussi être pour rajouter de la documentation, des tests, de la traduction, etc.\nCela nécessite de connaître un minimum le domaine, mais participer à l’open-source permet de découvrir des techniques de développement, des conventions de code, des domaines de travail, bref, plein de choses qui alimenteront votre culture du développement, tout en aidant des projets à se développer.\nSi vous êtes intéressé•e, je vous invite à lire cette page de documentation de Github qui va vous permettre de débuter dans le monde fabuleux de l’open-source.\n\nUn grand merci de votre lecture. J’espère que je vous aurais au moins permis d’y voir un peu plus clair dans cette jungle de l’enseignement en informatique.\nJe tiens à remercier mes relecteur•trices Jean B. et Matthieu G., qui m’ont permis de mieux formater mes idées et vérifier le niveau de bêtises que je raconte dans cet article.\nVous pouvez me retrouver sur très peu de réseaux sociaux pour plus de takes désastreuses et de mésaventures, disponibles juste en-dessous. Et, bien évidemment, le GIF de fin :\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMichael Scott vous remercie de votre lecture\n\t\t\t\t\t\t\t\t\t\t\t"},"Dev/Patterns/Observer---The-JS-Way":{"title":"Observer - The JS Way","links":[],"tags":["javascript","pattern","observer"],"content":"Back to the book of the four horsemen of Javapocalypse, they defined the Observer pattern as a way to define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.\nIt can seem strange, but it’s a pattern you probably already use if you play with JS listeners, because Listener is another name of this pattern. So this code :\nconst myListener = document.addListener(‘click’, () =&gt; console.log(‘User clicked’));\nuses the Observer pattern.\nAs explained by the Java boys, you can create a component that can trigger some code asynchronously in another component. This pattern is one of the best in JS and a fundamental of Reactive Programming.\nNote: other names of this pattern are Publisher, Subscriber or Listener.\nThe basic version\nThis first iteration of the pattern does the same job as the book’s initial version: trigger something at a specific moment.\nWe have two components: the subject (the thing which triggers something) and the listener (the triggered thing). For example, if you design a theme management service for your web app, you want the style of your application to be updated when the theme changes. Somewhere you will have your application renderer, which listens to changes of the theme management service.\nIn JS, we will use functions to make the pattern working.\nSubject\nimport Styles from &quot;./Styles&quot;;\n \nclass ThemeService {\n  constructor() {\n    this.theme = &quot;default&quot;;\n    this.styles = { primary: &quot;blue&quot; };\n \n    this.listeners = [];\n  }\n \n  getStyles = () =&gt; this.styles;\n \n  getTheme = () =&gt; this.theme;\n \n  changeTheme = (newTheme) =&gt; {\n    if (this.theme === newTheme) {\n      return;\n    }\n \n    this.theme = newTheme;\n    this.styles = Styles[newTheme];\n \n    this._notifyListeners();\n  };\n \n  onChange = (listener) =&gt; {\n    this.listeners.push(listener);\n  };\n \n  // That&#039;s a private function, so I wrote its name with an underscore\n  _notifyListeners = () =&gt; {\n    this.listeners.forEach((listener) =&gt; listener(this.theme, this.styles));\n  };\n}\n \nexport default new ThemeService();\nListener\nimport ThemeService from &quot;./ThemeService&quot;;\n \nfunction renderApplication(theme, styles) {\n  const loadedStyles = styles || ThemeService.getStyles();\n \n  // Do something with styles\n}\n \n// Add the listener\nThemeService.onChange(renderApplication);\n \n// Default rendering\nrenderApplication();\nExplanation\nNote: I use a Singleton for the service as described in a previous article.\nEach time you call the ThemeService.onChange function, you add a new listener to the ThemeService. At the moment you call ThemeService.changeTheme, the ThemeService will call all the listeners.\nIn the present situation, we will re-render our application when there’s a theme change. It’s a simple way to make a reactive application without any framework.\nThe “multiple events” version\nNow, imagine we have to implement a module to change icons independently from the styles. If we use the previous implementation, we have to add a separate array to store the icons listener and add a function like onChange. That’s not very practical.\nIf you remember EventListener on a DOM object, you know you can add a specific event listener by specifying its name in the addEventListener(event, listener) function. That’s the proper way to implement a multi-event system.\nSubject\nimport Icons from &quot;./Icons&quot;;\nimport Styles from &quot;./Styles&quot;;\n \nclass ThemeService {\n  constructor() {\n    this.theme = &quot;default&quot;;\n    this.iconsName = &quot;default&quot;;\n    this.styles = { primary: &quot;blue&quot; };\n    this.icons = { default: &quot;icon.png&quot; };\n \n    this.listeners = {};\n  }\n \n  getStyles = () =&gt; this.styles;\n \n  getTheme = () =&gt; this.theme;\n \n  getIconsName = () =&gt; this.iconsName;\n \n  getIcons = () =&gt; this.icons;\n \n  changeTheme = (newTheme) =&gt; {\n    if (this.theme === newTheme) {\n      return;\n    }\n \n    this.theme = newTheme;\n    this.styles = Styles[newTheme];\n \n    this._notifyListeners(&quot;theme&quot;, { styles: this.styles, theme: this.theme });\n  };\n \n  changeIcons = (newIconsName) =&gt; {\n    if (this.iconsName === newIconsName) {\n      return;\n    }\n \n    this.iconsName = newIconsName;\n    this.icons = Icons[newIconsName];\n \n    this._notifyListeners(&quot;icons&quot;, {\n      icons: this.icons,\n      iconsName: this.iconsName,\n    });\n  };\n \n  onChange = (eventName, listener) =&gt; {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n \n    this.listeners[eventName].push(listener);\n  };\n \n  _notifyListeners = (eventName, event) =&gt; {\n    if (!this.listeners[eventName]) {\n      return;\n    }\n \n    this.listeners[eventName].forEach((listener) =&gt; listener(event));\n  };\n}\n \nexport default new ThemeService();\nListener\nimport ThemeService from &quot;./ThemeService&quot;;\n \nfunction updateIcons(event) {\n  const icons = event.icons;\n \n  // Do something with icons\n}\n \nfunction renderApplication(event) {\n  const styles = (event &amp;&amp; event.styles) || ThemeService.getStyles();\n \n  // Do something with styles\n}\n \n// Add listeners\nThemeService.onChange(&quot;theme&quot;, renderApplication);\nThemeService.onChange(&quot;icons&quot;, updateIcons);\n \n// Default rendering\nrenderApplication();\nExplanation\nIt seems there’s a lot of changes. In reality, there are few significant changes:\n\nthis.listeners is now an object.\nThemeService.onChange and ThemeService._notifyListeners take an event name to know which event triggers the listener passed in parameter.\nwhen we notify listeners with ThemeService._notifyListeners, we pass an event as a second parameter. This event will be sent to every listener listening to this event.\nour listeners use the data from the event object.\n\nAnd now we have an easily extensible ThemeService with the basics of reactive programming.\n\nI hope you found this article helpful. See you soon!\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tThanks for reading! &lt;3\n\t\t\t\t\t\t\t\t\t\t\t"},"Dev/Patterns/Queue---The-JS-Way":{"title":"Queue - The JS Way","links":[],"tags":["javascript","pattern","data","structure","message","queue"],"content":"This time, I didn’t pick this pattern from the awful book of Javapocalypse. It’s something I discovered a few years ago when a colleague presented to me RabbitMQ. This technology is a software managing a lot of requests among micro-services by using a message queue. And it’s something very simple but now really important in cloud programming.\nIn programming, there are many queues: message queue, job queue, task queue, priority queue, command queue, etc. Let’s be simple, and talk about the queue like something calling your functions in the desired order. I’ll present to you the fundamental queue and some of its variations of the base in this article.\nThe basic version\nThe queue is a simple structure with two properties: the tasks and a boolean to know if the queue is running. There’s a function to add a new task to the queue and another function to run the queue. So we can easily get this code:\nclass SimpleQueue {\n  constructor() {\n    this.tasks = [];\n    this.isRunning = false;\n  }\n \n  add(task) {\n    this.tasks.push(task);\n  }\n \n  run() {\n    this.isRunning = true;\n \n    const currentTask = this.tasks.shift();\n \n    // Do something with your task\n \n    if (this.tasks.length) {\n      this.run();\n    } else {\n      this.isRunning = false;\n    }\n  }\n}\n \nexport default new SimpleQueue();\nIn theory, it works. In 99% of use cases, it works. But this code has a big problem due to the Javascript call stack. Each time you call a function, you push its information on the call stack. By doing this, your program knows what was and how to return to the previous function. That’s one of the main mechanisms of programming languages.\nIf we execute our code by adding three tasks and running the queue, we get something like this :\nSimpleQueue.add({data: 0});\nSimpleQueue.add({data: 1});\nSimpleQueue.add({data: 2});\nSimpleQueue.run();\n \n// In the queue, a ended run call the next run with the next task\n \nrun({data: 0}) {\n  // Execution of task 1\n  run({data: 1}) {\n    // Execution of task 2\n    run({data: 2}) {\n      // Execution of task 3\n    }\n  }\n}\nThe run() function calls itself while there’s a task in the queue. By doing this, we push the information of run function each time on the call stack while there’s a task in the queue. Is the call stack infinite? Of course not. You can execute this code to check the size of the call stack:\nconst fn = (i = 0) =&gt; {\n  console.log(`Current call: ${i}`);\n \n  return fn(i + 1);\n};\n \nfn();\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tThe code execution\n\t\t\t\t\t\t\t\t\t\t\t\nIn my case, if I run 7842 tasks, I break the program. To fix this, we have two solutions: node.js Events or a good ol’ while loop. We will use the second solution because it works in Vanilla Javascript too.\n  run() {\n    this.isRunning = true;\n \n    while (this.tasks.length) {\n      const currentTask = this.tasks.shift();\n \n      // Do something with your task\n    }\n \n    this.isRunning = false;\n  }\nSo here’s the basic queue which can run for a long time. Maybe you prefer the queue to have an automatic start when a task is added, so let’s move on this code:\nclass SimpleQueue {\n  constructor() {\n    this.tasks = [];\n    this.isRunning = false;\n  }\n \n  add(task) {\n    this.tasks.push(task);\n \n    // Here&#039;s the auto run\n    if (!this.isRunning) {\n      this._run();\n    }\n  }\n \n  // Anything with an underscore is private in my convention\n  _run() {\n    this.isRunning = true;\n \n    while (this.tasks.length) {\n      const currentTask = this.tasks.shift();\n \n      // Do something with your task\n    }\n \n    this.isRunning = false;\n  }\n}\n \nexport default new SimpleQueue();\nDesigning tasks\nAn essential part of using a queue is to design what is your task. This task is generally a function or an object.\nIn the case of a function, you have to define:\n\nthe parameters used to call your task.\nthe way to wait until the end of a task. If it’s a callback, we have to manage the queue to continue the code when the callback is called. If it’s a Promise, we have to use an await currentTask() in the run().\n\nclass FunctionalQueue {\n  async _run() {\n    this.isRunning = true;\n \n    while (this.tasks.length) {\n      const currentTask = this.tasks.shift();\n \n      await currentTask();\n    }\n \n    this.isRunning = false;\n  }\n}\nIn the case of an object, you have to define the properties of an object. For example, if I create an HTTPRequestQueue, my object will contain properties like the HTTP method, the URL, the body, the headers, etc.\nclass HTTPRequestQueue {\n  async _run() {\n    this.isRunning = true;\n \n    while (this.tasks.length) {\n      const { url, ...options } = this.tasks.shift();\n \n      if (options.withAuthorizationToken) {\n        if (!options.headers) {\n          options.headers = new Headers();\n        }\n \n        options.headers.append(\n          &quot;Authorization&quot;,\n          `Bearer ${ConnectionManager.getAuthorizationToken()}`\n        );\n      }\n \n      await fetch(url, options);\n    }\n \n    this.isRunning = false;\n  }\n}\nBy using an object, you choose the behavior of your queue due to the impossibility of executing arbitrary code. In other words, using an object is the best way to make a business-specific queue, and using a function is the best way to make a generic queue.\nWaiting the end of the queue\nThe first thing you could need would be to wait until the end of the queue. For example, you want to run a batch of network requests before displaying a success message. In this case, we will use a classic Observer:\nclass SimpleQueue {\n  constructor() {\n    this.endListeners = [];\n    this.tasks = [];\n    this.isRunning = false;\n  }\n \n  // To add an observer\n  onEnd(fn) {\n    this.endListeners.push(fn);\n  }\n \n  // To remove an observer\n  removeOnEnd(fn) {\n    const index = this.endListeners.indexOf(fn);\n \n    if (index !== -1) {\n      this.endListeners.splice(index, 1);\n    }\n  }\n \n  add(task) {\n    this.tasks.push(task);\n \n    if (!this.isRunning) {\n      this._run();\n    }\n  }\n \n  _run() {\n    this.isRunning = true;\n \n    while (this.tasks.length) {\n      const currentTask = this.tasks.shift();\n \n      // Do something with your task\n    }\n \n    this.isRunning = false;\n \n    // Call the observers\n    if (this.endListeners) {\n      this.endListeners.forEach((observer) =&gt; observer());\n    }\n  }\n}\n \nexport default new SimpleQueue();\nI know callbacks are a bit oldish, so you can extend this code by adding a waitingEnd() function which returns a Promise:\n  waitingEnd() {\n    return Promise((resolve) =&gt; {\n      const onEndListener = () =&gt; {\n        this.removeOnEnd(onEndListener);\n \n        resolve();\n      };\n \n      this.onEnd(onEndListener);\n    });\n  }\n \n// In your code\n \nawait SimpleQueue.waitingEnd();\nRunning tasks in parallel\nExecuting tasks one-by-one can be a bit slow. Maybe you want to run a set of N tasks in parallel. We must reconsider the queue by adding the possibility to run N times the while loop. Javascript is a mono-threaded language, so we don’t have to manage concurrency problems like concurrent modifications of a variable. So here we go:\nclass ParallelQueue {\n  constructor() {\n    this.tasks = [];\n    // Replace isRunning by runningTasks and maxTasks\n    this.runningTasks = 0;\n    this.maxTasks = 3;\n  }\n \n  add(task) {\n    this.tasks.push(task);\n \n    // Start a loop if we&#039;re not at the maximum of tasks\n    if (this.runningTasks &lt; this.maxTasks) {\n      this._run();\n    }\n  }\n \n  _run() {\n    this.runningTasks++;\n \n    while (this.tasks.length) {\n      const currentTask = this.tasks.shift();\n \n      // Do something with task\n    }\n \n    this.runningTasks--;\n \n    // Call the observers when there&#039;s no task\n    if (!this.runningTasks &amp;&amp; this.endListeners) {\n      this.endListeners.forEach((observer) =&gt; observer());\n    }\n  }\n}\n\nNow, you’re the master of the queue. There are many possible extensions to this structure, like adding events at each end of a task, creating rollbacks when a task failed, or anything useful for you.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tThanks for reading! &lt;3\n\t\t\t\t\t\t\t\t\t\t\t"},"Dev/Patterns/Singleton---The-JS-way":{"title":"Singleton - The JS way","links":[],"tags":["javascript","pattern","singleton"],"content":"Described in Design Patterns from E. Gamma, R. Helm, R. Johnson, and J. Vlissides, the pattern “ensures a class only has one instance, and provide a global point of access to it.” It’s often used when you want to write a Service, a Factory, or any software component which needs to be unique.\nBy adding unicity to an instance, you provide a way to share any information or feature between two or more components in your code. The instance is the same, so all related data too.\nBase: the Java pattern but with JS\nSo we have to implement the pattern? Huh, it’s ok. JavaScript has classes. It will be easy.\nWe reproduce the good ol’ pattern with ES6 Classes. We create a ‘static getInstance()’ to get the singleton instance, and we export the class.\nSo Java-ish!\nPattern\nclass Translator {\n  static _instance;\n \n  static getInstance() {\n    if (!Translator.instance) {\n      Translator.instance = new Translator();\n    }\n \n    return Translator.instance;\n  }\n \n  constructor() {\n    this.language = &quot;fr&quot;;\n  }\n \n  getTranslation(text) {\n    // doSomething\n  }\n}\n \nexport default Translator;\nUsage\nimport Translator from &quot;./Translator&quot;;\n \nconst translation = Translator.getInstance().getTranslation(&quot;NEXT&quot;);\nProblems\n\nNo possibility to control the constructor: in the Java version, we must set the constructor as ‘private’ to block any ‘new Translator()’ call out of the class itself. This is not possible in JS.\nNeeds to call getInstance() after import: oh lord, if we want to use something as verbose as Java, use Java.\n\nUpgrade: the pattern with ES modules\nES Modules (especially the import/export syntax) allow us to export a specific datum during the export.\nExported datum will be the same anywhere the datum is imported.\nWith this information, we can now remove all the static stuff and export an instance of our Translator.\nEach time we will import the Translator module, the JS engine will provide this instance. And like any singleton, all data of this instance are preserved among files.\nPattern\nclass Translator {\n  constructor() {\n    this.language = &quot;fr&quot;;\n  }\n \n  getTranslation(text) {\n    // doSomething\n  }\n}\n \nexport default new Translator();\nUsage\nimport Translator from &quot;./Translator&quot;;\n \nconst translation = Translator.getTranslation(&quot;NEXT&quot;);\nThis one is the implementation I like to use. You have to code your class and export an instance. Nothing complicated, and it’s powerful to create services in a React application or a Node.JS application.\nNote: it also works with the “module.exports” syntax of Node.JS.\nUpgrade bonus: the pattern without classes\nYeah, you can use an Object-Oriented pattern without the fundamental of the paradigm. You have to apply the same technique seen before but with any object. I encapsulate the whole code in a function to avoid adding variables in the global context (in proper terms, a closure).\nPattern\nexport default (() =&gt; {\n  let language = &quot;fr&quot;;\n \n  function getTranslation(text) {\n    // doSomething\n  }\n \n  function setLanguage(newLang) {\n    language = newLang;\n  }\n \n  return {\n    getTranslation,\n    setLanguage,\n  };\n})();\nUsage\nimport Translator from “./Translator”;\n \nconst translation = Translator.getTranslation(“NEXT”);\n\nI hope you found this short article useful. I’ll probably write some others patterns during the next weeks, so don’t hesitate to follow the company on Twitter.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tThanks for reading! You rock!\n\t\t\t\t\t\t\t\t\t\t\t"},"Dev/Patterns/i18n'em-all-with-Singleton":{"title":"i18n'em all with Singleton","links":[],"tags":["javascript","pattern","singleton","example","i18n","translation"],"content":"Developing a good web app involves to implement an efficient internationalization system. You have to provide the same content in multiple languages, so you need a module to translate all your texts.\nThis article will explain how to build a simple translation system (or i18n module) for all your application texts. I don’t consider other data like dates or phone numbers which are a huge mess but can be implemented in the same way as text.\nBuild the Singleton\nFirstly we need to write a simple Singleton as explained in this article. I take the exact code from the end of the article, which is :\nclass Translator {\n  constructor() {\n    this.language = &quot;fr&quot;;\n  }\n \n  get(text) {\n    // doSomething\n  }\n}\n \nexport default new Translator();\nWe can now call something like Translator.get(&#039;YES&#039;) from anywhere in our code by importing the module.\nAnalyze logic behind the translation\nBefore implementing the translation module, we have to think about the features of the module.\nHere are some examples of features I want :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputEnglishFrench(&#039;HELLO&#039;)HelloBonjour(&#039;HELLO&#039;, &#039;Florian&#039;)Hello FlorianBonjour Florian(&#039;YOU_HAVE_N_MESSAGES&#039;, 9)You have 9 messagesVous avez 9 messages(&#039;YOU_HAVE_N_MESSAGES&#039;, 1)You have 1 messageVous avez 1 message\nSo I need a module that can take some parameters to include them in the translated texts. I also need something to configure translations according to the parameter (for example, to create a singular or a plural word).\nI’ll use a particular combination of characters to determine where I must replace the texts with parameters. This combination is $-, and we replace each presence of this combination with the argument of Translator.get.\nLet’s write i18n files for English and French:\n{\n  &quot;NO&quot;: &quot;Non&quot;,\n  &quot;YES&quot;: &quot;Oui&quot;,\n \n  &quot;HELLO&quot;: {\n    &quot;null&quot;: &quot;Bonjour&quot;,\n    &quot;N&quot;: &quot;Bonjour $-&quot;\n  },\n  &quot;YOU_HAVE_N_MESSAGES&quot;: {\n    &quot;null&quot;: &quot;Vous n&#039;avez pas de messages&quot;,\n    &quot;0&quot;: &quot;Vous n&#039;avez pas de messages&quot;,\n    &quot;1&quot;: &quot;Vous avez 1 message&quot;,\n    &quot;N&quot;: &quot;Vous avez $- messages&quot;\n  }\n}\n{\n  &quot;NO&quot;: &quot;Non&quot;,\n  &quot;YES&quot;: &quot;Oui&quot;,\n \n  &quot;HELLO&quot;: {\n    &quot;null&quot;: &quot;Bonjour&quot;,\n    &quot;N&quot;: &quot;Bonjour $-&quot;\n  },\n  &quot;YOU_HAVE_N_MESSAGES&quot;: {\n    &quot;null&quot;: &quot;Vous n&#039;avez pas de messages&quot;,\n    &quot;0&quot;: &quot;Vous n&#039;avez pas de messages&quot;,\n    &quot;1&quot;: &quot;Vous avez 1 message&quot;,\n    &quot;N&quot;: &quot;Vous avez $- messages&quot;\n  }\n}\nWe define JSON objects where each key can contain a string or an object with keys :\n\n&quot;null&quot; for no argument\n&quot;0&quot; / &quot;1&quot; / &quot;2&quot; / &quot;test&quot; / … to define a specific case for the argument\n&quot;N&quot; for all cases not defined for argument\n\nImplementation of the get() function\nIt’s pretty simple to add the argument in the translation. We use a regex within the String.replace function, and we already finished this part.\n_insertArguments = (text, arg) =&gt; {\n  if (!arg) {\n    return text;\n  }\n \n  return text.replace(/\\$\\-/g, arg);\n};\nNow, we have to get the translation and use the good case according to the argument. First, get the translation and use it if this is a string. If we can’t find any translation, return the text.\nconst currentTranslation = this.translations[text.toUpperCase()];\n \nif (!currentTranslation) {\n  return text;\n}\n \nif (typeof currentTranslation === &quot;string&quot;) {\n  return this._insertArguments(currentTranslation, arg);\n}\nIf it isn’t a string, we assume it’s an object. So we have to check if there’s an argument. If not, use the null entry of the translation. We also added a check if we have to set a null translation, but there’s no null transaction.\nif (arg === undefined || arg === null) {\n  if (!currentTranslation.null) {\n    throw new Error(`Cannot find null translation for ${text}`);\n  }\n \n  return currentTranslation.null;\n}\nNow, there’s an argument. Let’s check if there’s a translation entry with this value and use it if it exists. We cast the argument explicitly to a String because it’s nice to respect typing.\nif (currentTranslation[String(arg)]) {\n  return this._insertArguments(currentTranslation[String(arg)], arg);\n}\nLast but not least, we are in the N case. So get the N translation and insert the argument into it.\nif (!currentTranslation.N) {\n  throw new Error(`Cannot find N translation for ${text}`);\n}\n \nreturn this._insertArguments(currentTranslation.N, arg);\nWe also add a setLanguage to the Translator to … set the language. Yeah, not very original.\nsetLanguage = (newLang) =&gt; {\n  switch (newLang) {\n    case &quot;fr-FR&quot;:\n      this.language = &quot;fr-FR&quot;;\n      this.translations = FR_FR_TRANSLATIONS;\n      break;\n    case &quot;en-US&quot;:\n    default:\n      this.language = &quot;en-US&quot;;\n      this.translations = EN_US_TRANSLATIONS;\n  }\n};\nThat’s it. We have a simple i18n module for all of our texts.\nAll the Translator code is available in this gist.\n\nI hope you found this short article pleasant. Don’t hesitate to tell me what you have thought of this one on Twitter. I’ll be happy to discuss it with you :)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tThanks for reading! Love on you!\n\t\t\t\t\t\t\t\t\t\t\t"},"Dev/The-Useless-Type-Calculator-in-Typescript":{"title":"The Useless Type Calculator in Typescript","links":[],"tags":["typescript","calculator","typings"],"content":"It’s time for one of the most useless things I ever made — something beyond reason, where the logic stops being rational and the void is the reality. It’s time to create a calculator using only types from Typescript.\n\nA few days ago, I remembered a discussion with a friend about Turing-complete systems. We checked Wikipedia article on the subject, and we discovered that many things (like games) were Turing-complete. So yes, Minecraft is Turing-complete, Factorio too, Dwarf Fortress too, and it seems that Habbo Hotel and Magic: The Gathering (yes, the cards game) are also Turing-complete.\nWe also found somewhere that the type system of Typescript is Turing-complete. With this knowledge, I decided to start developing something that would not change anything: a calculator with only Typescript types.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tYou reading this.\n\t\t\t\t\t\t\t\t\t\t\t\nYes. This is one of the most stupid ideas I got for a while. But this is a fun exercise you can do to prove your skills in typing everything.\nThe rules\nIf you want to try to do the calculator, here are the rules of the “game” (if we can call this a game):\n\nyou have to start with only two types: BZero (for Boolean Zero) and BOne (for Boolean One).\n\ntype BZero = false;\ntype BOne = true;\n\nyou can only use types. No interface, no enum, only types.\nyou have to compute the four basic mathematical operations (with types): add, subtract, multiply and divide. You can also add modulo.\nthis code should works:\n\n// Equivalent of (6 + 6 * (1 + 2)) / (6 - 2) = 6\ntype StrangeOperation = Divide&lt;\n  Add&lt;Multiply&lt;Six, Add&lt;One, Two&gt;&gt;, Six&gt;,\n  Subtract&lt;Six, Two&gt;\n&gt;;\nDue to the way I implement the calculator, I use another type Result to read the result:\ntype OpResult = Result&lt;StrangeOperation&gt;;\nThis type is totally optional in the rules. But you must have a exact number type at the end of the computation. For example, you should have:\ntype OpResult = 6;\nAnd here you go! It’s time for you to code!\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n…\n…\n…\nYeah, better read the solution, isn’t it?\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nThe solution\nConception\nFirstly, I search what the ways to get a number type from a type in Typescript are. You have your base operation to transform BZero and BOne to Zero and One number if you know this.\nI tried something based on array indexes, but there was no way to get a number. So I discovered that Typescript tuples have a length property. And it works with variable tuples since 3.0. With this information, I began to write a calculator based on Tuples.\ntype TypeNumber = Array&lt;any&gt;;\nThe first types we need are the Zero and the One based on tuples. In this way, I write a simple conditional type that returns a tuple with the number of elements equivalent to the number it describes. For example :\ntype ToTypeNumber&lt;A&gt; = A extends true ? [true] : [];\n \ntype Zero = ToTypeNumber&lt;BZero&gt;;\ntype One = ToTypeNumber&lt;BOne&gt;;\n \n// Result\ntype Zero = [];\ntype One = [true];\nIn this way, we need a type to read the length of the tuple to get the desired type number.\ntype Result&lt;A extends TypeNumber&gt; = A[&quot;length&quot;];\n \n// Example\ntype C = Result&lt;One&gt;;\n \n// Result\ntype C = 1;\nOperation 1 : Add\nWith this conception, the Add type is the most straightforward operation to implement, thanks to Typescript 4.0. We have to concatenate the two tuples, and we have done an Add type.\ntype Add&lt;A extends TypeNumber, B extends TypeNumber&gt; = [...A, ...B];\n \n// Example\ntype Two = Add&lt;One, One&gt;;\ntype TwoResult = Result&lt;Two&gt;;\ntype Four = Add&lt;Two, Two&gt;;\ntype FourResult = Result&lt;Four&gt;;\n \n// Result\ntype Two = [true, true];\ntype TwoResult = 2;\ntype Four = [true, true, true, true];\ntype FourResult = 4;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nOperation 2 : Subtract\nThe hard way\nNow, the fun begins.\nWe need to think about the computation behind the subtraction. So let’s come back to elementary school.\nI have 6 balloons. I give 4 balloons to Manu. I now have 2 balloons remaining.\nIn terms of tuples, we can illustrate the problem with this :\ntype MyBalloons = [true, true, true, true, true, true];\ntype NewManuBalloons = [true, true, true, true];\ntype NewMyBalloons = [true, true];\nTo implement the subtraction, I take each element of MyBalloons one by one and check if each element exists in NewManuBalloons. When I arrive at the moment there’s no more element in NewManuBallooons, I start to increment a variable which will be the result.\nBut there’s a problem: it looks like a loop. How can we achieve a loop in Typescript?\nThe answer here is to use a recursive type. And with a condition, we can do that with a recursive conditional type. Here’s the code:\ntype Subtract&lt;\n  A extends TypeNumber,\n  B extends TypeNumber,\n  Res extends TypeNumber = []\n&gt; = A extends [boolean, ...infer H]\n  ? B extends [boolean, ...infer J]\n    ? Subtract&lt;H, J, Res&gt;\n    : Subtract&lt;H, B, Add&lt;Res, One&gt;&gt;\n  : Res;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tProbably you.\n\t\t\t\t\t\t\t\t\t\t\t\nOh yeah, there’s another tip: I use type inference to remove elements of a tuple. For example, if I have type A = [true, true, true], I will get type H = [true, true]. This is because I check if A’s first element is a boolean, and I send the rest of the tuple in another type variable.\nI use the type inference in a second condition to check if the current element exists in B. When there’s an element in A and B, I recall the Subtract type with the remaining elements of A (H) and the remaining elements of B (J). If there’s no more element in B, we continue to call Subtract, but we increase Res at each call. And when A is empty, we return Res type.\nAnd now, we have a subtraction with only types. Note that this subtraction only works with positive integers. This problem is caused by tuples, because yes, you cannot have a tuple with a negative length.\n// Example\ntype TwoFromSubtract = Subtract&lt;Four, Two&gt;;\ntype TwoFromSubtractResult = Result&lt;TwoFromSubtract&gt;;\n \n// Result\ntype TwoFromSubtract = [true, true];\ntype TwoFromSubtractResult = 2;\nThe smart way\nThe hard way is a pure example of overengineering. Because there’s such a simple method to do a subtraction: subtract B from A and keep the result.\nFor my defense, I understood that I could use type inference between 2 dynamic types when working on Divide. But you can shame me, and it’s okay.\nHere’s the code:\ntype BetterSubtract&lt;A extends TypeNumber, B extends TypeNumber&gt; = A extends [\n  ...B,\n  ...infer Res\n]\n  ? Res\n  : Zero;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tSmart.\n\t\t\t\t\t\t\t\t\t\t\t\nOperation 3 : Multiply\nWe already have seen all the techniques we need to Multiply. So we need to add B times the A number. This is now a piece of cake since the subtraction’s hard way.\nTo multiply, make a loop (with recursive types). In this loop, remove One from B, add A to the result, and send the Res when B is Zero. In this way, we will add A B-times, so we are doing A x B.\ntype Multiply&lt;A extends TypeNumber, B extends TypeNumber&gt; = B extends [\n  boolean,\n  ...infer S\n]\n  ? Add&lt;Multiply&lt;A, S&gt;, A&gt;\n  : [];\n \n// Example\ntype MultTest = Multiply&lt;Four, Six&gt;;\ntype MultTestResult = Result&lt;MultTest&gt;;\n \n// Result\ntype MultTest = [\n  true,\n  ... 22 more,\n  true\n];\ntype MultTestResult = 24;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nOperation 4 : Divide\nWe have worked since the beginning with integers. So we can only have a Euclidian division for this part.\nIn the subtraction, we search if A can contain B and what’s remaining. We will do the same thing, except we need to search how many times A contains B. So we have the same primary condition as the subtraction, but we add a recursive type with an incremented result at each loop iteration. When A cannot contain B anymore, send the number of loops done until here.\ntype Divide&lt;\n  A extends TypeNumber,\n  B extends TypeNumber,\n  Res extends TypeNumber = Zero\n&gt; = A extends [...B, ...infer T] ? Divide&lt;T, B, Add&lt;Res, One&gt;&gt; : Res;\n \n// Example\ntype DivideTest = Divide&lt;MultTest, Six&gt;;\ntype DivideTestResult = Result&lt;DivideTest&gt;;\ntype DivideTest2 = Divide&lt;Six, Four&gt;;\ntype DivideTest2Result = Result&lt;DivideTest2&gt;;\n \n// Result\ntype DivideTest = [true, true, true, true];\ntype DivideTestResult = 4;\ntype DivideTest2 = [true];\ntype DivideTest2Result = 1;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nOperation Bonus : Modulo\nModulo is almost the same as the Divide. We keep checking how many times A contains B, and when we reach the end, we return the remaining value instead of the number of iterations. And tadaaaaaa, we get the modulo operation.\ntype Modulo&lt;T extends TypeNumber, U extends TypeNumber&gt; = T extends [\n  ...U,\n  ...infer S\n]\n  ? Modulo&lt;S, U&gt;\n  : T;\n \n// Example\ntype ModuloTest = Modulo&lt;MultTest, Six&gt;;\ntype ModuloTestResult = Result&lt;ModuloTest&gt;;\ntype ModuloTest2 = Modulo&lt;Six, Four&gt;;\ntype ModuloTest2Result = Result&lt;ModuloTest2&gt;;\n \n// Result\ntype ModuloTest = [];\ntype ModuloTestResult = 0;\ntype ModuloTest2 = [true, true];\ntype ModuloTest2Result = 2;\n\nSo here we have a working calculator with only Typescript types. I thought about implementing the decimal calculator based on the binary representation of decimals. But this is clearly madness. I hope you enjoy reading this piece of programming like I enjoyed writing it. And last but not least, here’s the topic of the initial discussion I had with my friend about Turing-Complete Typescript.\nThanks for reading! From all of us here, I want to wish you happy programming and God Bless, my friend! :)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\txoxo &lt;3\n\t\t\t\t\t\t\t\t\t\t\t"},"Dev/Tous-les-trucs-pour-briller-comme-développeur•euse":{"title":"Tous les trucs pour briller comme développeur•euse","links":[],"tags":["dev"],"content":"C’est juste une longue liste de trucs lus ou à lire qui, peut-être un jour, me serviront.\nMis à jour quand j’en ai envie.\nNotions d’informatique\n\nMainframe : https://en.wikipedia.org/wiki/Mainframe_computer\n\nNotions de typage\n\nBottom type : https://en.wikipedia.org/wiki/Bottom_type\nDuck typing : https://stackoverflow.com/questions/4205130/what-is-duck-typing\nExpression problem : https://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt\nGradual typing : https://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/\nManifest typing : https://en.wikipedia.org/wiki/Manifest_typing\nNominal and structural typing : https://www.typescriptlang.org/play/?#example/nominal-typing\nQuasi-static typing : https://dl.acm.org/doi/10.1145/96709.96747\nTop type : https://en.wikipedia.org/wiki/Top_type\n\nNotions bas niveau\n\nConcurrency vs Parallelism : https://blog.heroku.com/concurrency_is_not_parallelism\nCooperative multitasking : https://en.wikipedia.org/wiki/Cooperative_multitasking\nCoroutine : https://en.wikipedia.org/wiki/Coroutine\nFutex (Fast Userspace Mutex) : https://www.akkadia.org/drepper/futex.pdf\nNX bit : https://en.wikipedia.org/wiki/NX_bit\nRTC (Run-to-completion) : https://en.wikipedia.org/wiki/Run_to_completion_scheduling\nPreemptive multitasking : https://en.wikipedia.org/wiki/Preemption_(computing)\nSpinlock : https://en.wikipedia.org/wiki/Spinlock\nTorn reads with cache coherence : https://stackoverflow.com/a/64602926\nWatchdog timer : https://en.wikipedia.org/wiki/Watchdog_timer\n\nNotions de programmation fonctionnelle\n\nContinuation Passing Style : https://matt.might.net/articles/by-example-continuation-passing-style/\n\nArchitecture logicielle\n\nObserver Synchronization : https://martinfowler.com/eaaDev/MediatedSynchronization.html\nPresentation Domain Data Layering : https://martinfowler.com/bliki/PresentationDomainDataLayering.html\nSaga : https://microservices.io/patterns/data/saga.html\n\nTechniques de programmation\n\nDuff’s device (C) : https://en.wikipedia.org/wiki/Duff’s_device\nPigeon’s device (C) : http://pigeonsnest.co.uk/stuff/pigeons-device.html\n\nSécurité appliquée à la programmation Web\n\nHop-by-hop HTTP header : https://0xn3va.gitbook.io/cheat-sheets/web-application/abusing-http-hop-by-hop-request-headers\nXXE Injection : https://book.hacktricks.xyz/pentesting-web/xxe-xee-xml-external-entity\n\nJavascript\n\nAutomatic Semicolon Insertion : https://262.ecma-international.org/7.0/#sec-rules-of-automatic-semicolon-insertion\ncall/cc in Javascript : https://martin-henz.github.io/martin-henz/2022/05/02/ece-with-call-cc.html\nLabeled statement : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\nOpérateur d’exponentation : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation\nShared memory and atomics : https://exploringjs.com/es2016-es2017/ch_shared-array-buffer.html\nSyntactic Tail Calls : https://github.com/tc39/proposal-ptc-syntax\nTagged templates : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\nTail calls elimination in V8 status : https://chromestatus.com/feature/5516876633341952\nTest262 : https://github.com/tc39/test262\nTrampoline computing : https://stackoverflow.com/a/27704484/6608382\n(ES262 Stage 2.7) ShadowRealm : https://github.com/tc39/proposal-shadowrealm\n(ES262 Stage 3) Temporal : https://github.com/tc39/proposal-temporal\n\nPython\n\nGIL (Global Interpreter Lock) : https://realpython.com/python-gil/\n\nOutils de sécurité\n\nHackTricks (doc) : https://book.hacktricks.xyz/\nnginxpwner : https://github.com/stark0de/nginxpwner\n"},"Dev/Type-the-Untypable":{"title":"Type the Untypable","links":[],"tags":["typescript","hints"],"content":"You use Typescript. You want to type the world. But you don’t want to read the whole Typescript doc. So here I come with this introduction to Typescript advanced typings with all type tricks you need.\nNote: this article is not an introduction for Typescript beginners. I’m considering you’re here with a bit of Typescript experience and you need to go further in Typescript world. If you never used Typescript, please take a look at lease to this tutorial and take the time to manipulate some Typescript code.\n\nTypescript in 5 minutes: https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\n\nDynamically type a function\nYou need to create a function which can have different returns types according to its parameters.\nCode\nconst f = &lt;T&gt;(param1: T): T =&gt; { return param1; }\nUsage\nconst createStore = &lt;T&gt; (mainReducer: Reducer&lt;T&gt;): Store&lt;T&gt; =&gt; {…}\n \nconst someStore = createStore(someTypedReducer);\nExplanation\nThis feature works like the infer syntax. We describe a generic type T which will be determined by the Typescript compiler each time you will use the function f. You can use this type to create a complex return type like in **Usage.\nThis is a very powerful feature which allows the creation of complex auto-inferred types.\nYou can take a look in Typescript 2.4 notes to see some other examples.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nNon Nullable type\nYou need to forbid a variable to be null (or undefined).\nCode\ntype NonNullable&lt;T&gt; = T extends null | undefined ? never : T;\nImportant note: NonNullable is available in global Typescript context\nUsage\nNonNullable&lt;string | null&gt; // string\nExplanation\nWe need to use a Typescript 2.8 trick with a distributive conditional type.\nIf we take T = string | undefined, we reduce the code with this:\nNonNullable&lt;string|undefined&gt; = (string extends undefined | null ? never : T) | (undefined extends undefined | null ? never : T);\nSo we check each type of T and if one of these types is null or undefined, it will be replaced by never which is the Typescript way to remove a type.\nYou can also define a Diff type to remove any type from T:\ntype Diff&lt;T, U&gt; = T extends U ? never : T;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nCode\ntype ReturnType&lt;T&gt; = T extends (…args: any[]) =&gt; infer R ? R : any;\nImportant note: ReturnType is available in global Typescript context.\nUsage\nconst f = () =&gt; 2;\n \nReturnType&lt;typeof f&gt; // number\nExplanation\nAnother Typescript 2.8 use here.\ninfer keyword tells to the compiler to get the type of a variable. We check if T is a function and telling to the compiler to associate a type R to the type of the return. So we just have to return the type R if T is a function.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nInstance Type of a class\nCode\ntype InstanceType&lt;T extends new (…args: any[]) =&gt; any&gt; = T extends new (…args: any[]) =&gt; infer R ? R : any;\nImportant note: InstanceType is available in global Typescript context.\nUsage\nclass C { constructor() {} }\n \nInstanceType&lt;typeof C&gt; // C\nExplanation\nAlways Typescript 2.8 use here.\nThis is the same trick as ReturnType. We just need to check if the object T extends the function new (which is the needed function to create a class in JS). If new exists, we just get the return type of the new function.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nSet all properties of an object as optional\nCode\ntype Partial&lt;T&gt; = { [P in keyof T]?: T[P] };\nImportant note: Partial is available in global Typescript context.\nUsage\nPartial&lt;{ value: number}&gt; // {value?: number}\nExplanation\nWe dive in Typescript 2.1 here.\nThe syntax used here is the mapped typed syntax. We iterate on each key of T (stored each time in the type variable P) and for each key P, we create a new optional property with its value T[P].\nIt seems complicated at the beginning, but it’s just nothing more than an iteration on all keys of the object T.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nGet the type of a function parameter\nCode\ntype FirstParameter&lt;T&gt; = T extends (arg1: infer U, …args: Array&lt;any&gt;) =&gt; any ? U : undefined;\n \ntype SecondParameter&lt;T&gt; = T extends (arg1: any, arg2: infer U, …args: Array&lt;any&gt;) =&gt; any ? U : undefined;\nUsage\nconst f = (someArg: number, otherArg: string) =&gt; true;\n \nFirstParameter&lt;typeof f&gt; // number\n \nSecondParameter&lt;typeof f&gt; // string\nExplanation\nSome custom use of Typescript 2.8.\ninfer syntax can be used for anything in typing. Here, we just tell to Typescript to create a type U from getting the type of a specific argument when T is a function with enough parameters.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nMake a union with all values of an array/object\nYou have an array, and you want to create a single union type with all values of an array or an object.\nCode\ntype Union&lt;T&gt; = T[keyof T];\nUsage\nUnion&lt;{value: number; otherValue: string}&gt; // number | string\nExplanation\nThis one looks so ridiculous, but I figure out how to do that after a long time. It’s a custom use of the mapped types and lookup types of Typescript 2.1.\nWe iterate on all keys of T on T itself. The lookup type (keyof T) gets all keys of T and create a union with all these keys. Accessing to T with a union of keys result by creating a union of values types.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\nWith these simple tricks, you can now achieve a lot of works in Typescript world.\nDon’t hesitate to comment if you have some questions about them. I’m available on this post comments or on my Twitter.\nThanks for reading! :)"},"Jeux/Modding/Rimworld/Démarrer-le-modding-sur-Rimworld":{"title":"Démarrer le modding sur Rimworld","links":[],"tags":["modding","rimworld"],"content":"Après un an de modding sur Rimworld, il me semble pertinent de faire ce que tout•e bon•ne développeur•euse devrait faire en temps normal mais ne fait jamais par manque de temps : de la documentation technique. Pour ma part, je vais déjà recenser tout ce que j’ai appris durant le développement de mon mod Diary ainsi que de la mise à jour pour la version 1.5 de LWM’s DeepStorage.\nMise en place d’un projet\nRimworld est un jeu conçu via Unity. Il utilise le support de C# (+ dotnet 4.7.2) pour la partie programmatique et XML pour les déclarations.\nGrâce au développement de mono, il est possible de travailler sur n’importe quel système d’exploitation.\nPour travailler, il est nécessaire d’avoir les outils suivants :\n\nun IDE pour faciliter le lancement des commandes de build, le support des syntaxes C# et autres joyeusetés. Vous pouvez travailler avec un éditeur de texte, mais il y aura plus de configuration.\nun IL Viewer (visualiseur de langage intermédiaire) afin de décompiler le code de Rimworld pour comprendre et modifier le comportement du jeu.\n\nWindows\n\nIDE : Visual Studio fait très bien l’affaire. L’IDE est complet et gratuit.\nIL Viewer : ILSpy fonctionne très bien et offre des fonctionnalités comme la recherche par nom ou par utilisation d’une fonction.\n\nMacOS\n\nIDE : Rider est très bien mais payant. Visual Studio sur MacOS souffre d’un manque de fonctionnalités très important par rapport à la version Windows, et est déprécié à partir du 31 Août 2024. En alternative gratuite, il est possible de passer par Visual Studio Code avec le C# Dev Kit\nIL Viewer : Rider intègre un IL Viewer qui fonctionne très bien.\n\nLinux\nJe n’ai plus de Linux actuellement, mais Rider est disponible sur Linux."},"Musique/Et-la-machine-devînt-artiste":{"title":"Et la machine devînt artiste","links":[],"tags":["generation","composition","art"],"content":"La musique est un art. Elle nous touche, nous transporte, nous fascine, mais sans jamais se répéter. Les compositeurs créent depuis des siècles nombre d’oeuvres uniques et formidables : nous pouvons goûter à la Danse Macabre de Camille Saint-Saëns et enchaîner aussitôt sur un Iron de Woodkid pour finir sur un Time de Pink Floyd. Et la technologie nous permet de vivre et revivre ces instants que la musique nous procure, encore et encore.\nEn contre-courant le plus total, la musique générative offre un aspect nouveau à ce que nous connaissons. Nous n’avons plus un morceau écoutable à l’infini, mais une infinité de morceaux écoutables une fois. Nous redécouvrons alors que la musique peut être éphémère et imprévisible, celle-ci nous offrant un unique billet vers un monde mystérieux.\nLa consommation musicale en 2019\nAvant toute chose, il est nécessaire de faire un point sur l’état de la musique, et notamment sa consommation, à l’heure où ces lignes sont écrites.\nD’après l’étude Music Listening de 2019 de l’IFPI (International Federation of the Phonographic Industry), basée sur les 16 à 64 ans en étudiant 18 pays :\n\nnous écoutons de la musique environ 18 heures par semaine (soit 2.5 heures par jour) (17.8h en 2018).\n89% de la consommation musicale provient des services de streaming (86% en 2018).\nnous écoutons de la musique dans la voiture, pour se relaxer à la maison ou encore en faisant le ménage et la cuisine.\n\nNous sommes donc des consommateurs de musique notoires, et ce via des services de streaming. Cependant, l’étude ne détaille pas les manières que les personnes ont de consommer la musique : est-ce que nous aimons les nouveautés ? Combien de fois nous écoutons un même morceau ? Est-ce que nous écoutons tous la même chose ?\nPour étayer mon propos, il est nécessaire de jeter un coup d’oeil à l’étude Extreme re-listening: Songs people love … and continue to love de Frederick Conrad, Jason Corey, Samantha Goldstein, Joseph Ostrow et Michael Sadowsky. À défaut de pouvoir obtenir le papier (merci au système de publications des papiers scientifiques), cet article du Michigan News détaille les points suivants :\n\n86% des participants écoute leurs musiques préférées quotidiennement ou plusieurs fois par semaine.\n43% des personnes réécoutant leurs musiques préférées quotidiennement le font au moins 3 fois par jour.\n60% écoutent leurs musiques préférées plusieurs fois d’affilée.\n\nOn peut aisément dire, à partir de ces statistiques, que les gens aiment particulièrement écouter les musiques auxquels ils se sentent proches. Nous semblons donc consommer régulièrement les mêmes morceaux.\nEn combinant ces deux études, on peut affirmer en partie que les gens aiment écouter des morceaux qu’ils connaissent, et ces morceaux sont des versions définies et figés dans le temps. A contrario du concert, une musique que nous écoutons ne changera pas : The Sound of Silence de Simon &amp; Garfunkel reste toujours le même, la seule différence étant la qualité d’écoute que nous avons aujourd’hui par rapport à sa sortie initiale.\nIl n’y a qu’une performance enregistrée une fois et répétée par la machine indéfiniment. Peut-être qu’à un moment il y aura une version remasterisée, mais elle ne change pas le matériel de base : elle ne fait que le faire sonner mieux par rapport aux règles de production de l’époque.\nGénérer is the new composer\nPetit historique personnel\nDurant mon cursus universitaire, j’ai eu l’occasion de rencontrer Pierre-Henri Vulliard, travaillant au SCRIME sur la génération musicale. Je me souviens d’un travail titanesque qu’il avait réalisé pour construire des morceaux en se basant sur des boîtes à rythme (dans un langage de programmation spécialisé dont j’ai oublié le nom), et c’était assez incroyable de voir ça. On découvre une machine qui compose en mélangeant des règles musicales et des nombres aléatoires, en ajoutant des variations basées sur le swing et tant d’autres critères.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tBenn Jordan aka. The Flashbulb\n\t\t\t\t\t\t\t\t\t\t\t\nPlusieurs années plus tard, Benn Jordan (The Flashbulb), compositeur de musiques électroniques, avait fait un point sur l’état de la musique générative à travers une série de vidéo Youtube (Partie 1 - Partie 2 - Partie 3). Le résultat était assez impressionnant, mais il s’agissait plus de génération de musique contrôlé et alors très redondant.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tJean-Michel Jarre et ses synthétiseurs analogiques\n\t\t\t\t\t\t\t\t\t\t\t\nPuis, en 2018, j’ai un ami qui m’a envoyé un article sur l’application EōN de JarreLab (= Jean-Michel Jarre). L’application coûte 10€, ce qui m’a rebuté au début, jusqu’à que je me laisse tenter. Et j’ai bien fait de me laisser tenter : je n’ai jamais connu une telle qualité de musique générative. C’est à tel point que je me demande toujours si on ne se moque pas de moi et que ce cher Jean-Michel a décidé de composer suffisamment de morceau pour que je ne puisse pas me souvenir des précédents.\n(Note : si vous êtes intéressés, c’est essentiellement de l’ambient / musique électronique et d’autres choses aussi, et c’est disponible ici uniquement sur iOS.)\nBref, on n’est pas là pour envoyer des fleurs à Jean-Michel.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t65daysofstatic\n\t\t\t\t\t\t\t\t\t\t\t\nPour continuer mes propos, l’année 2021 a été le moment où un petit groupe de post-rock instrumental britannique, 65daysofstatic, a décidé de créer un générateur de musiques nommé Wreckage Systems qui crée et diffuse de la musique sur plusieurs flux d’écoute (leur propre site et Youtube). Cette musique est créée selon différents schémas qu’ils ont développés et qu’ils continuent d’étoffer en se basant sur leurs travaux pour la musique pseudo-générative du jeu No Man’s Sky (qui est détaillée dans une excellente conférence à l’EGX). Les différentes musiques générées sont mensuellement exportées et retravaillées pour former des albums en version “fixe”.\nDécouverte de l’instant\nLa chose que EōN et Wreckage Systems m’ont fait réaliser est que la musique générative est éphémère. On peut la rapprocher, d’une certaine manière, à la musique créée en concert qui correspond à une version unique de plusieurs morceaux (tant que ceux-ci ne sont pas enregistrés). On peut garder des instants, on se souvient qu’il y a eu ce solo, cette mélodie, ce mix, mais on ne peut pas revivre le même moment.\nLa musique générative recrée ce sentiment et ramène l’écoute à ses origines les plus primaires : la découverte. Chaque morceau est une construction unique, et, pour peu que l’algorithme de génération aient des résultats suffisamment variable, il ne sera jamais possible de prévoir l’évolution des morceaux. Nous nous retrouvons dans un musée sans fin, perdu à déambuler dans les couloirs du son, sans aucun moyen de revenir sur nos pas.\nOn vit alors une expérience surnaturelle, où l’on écoute de la musique, jusqu’au moment où on entend une sonorité que l’on aime, qu’on aimerait réentendre, mais que nous savons perdue à jamais dans les méandres de l’électronique. Ô toi arpège au timbre si sompteux, ta perte fût un moment bien trop douloureux !\nGénérer l’existant : la composition\nSous ce titre qui ne veut presque rien dire, il est intéressant de mener la réflexion de ce que peut composer la musique générative. Nous avons traité d’un cas où la machine peut maintenant nous offrir de la musique de Jean-Michel Jarre et de 65daysofstatic jusqu’à ce que mort s’en suive. Mais serait-il possible d’appliquer ce procédé à une plus grande variété de musique ?\nLes évolutions sur l’intelligence artificielle durant les années 2010 sont une excellente réponse à cette question. Pour illustrer le propos, penchons nous sur le Doodle (les logos spéciaux de Google) du 21 Mars 2019 pour célébrer ce cher Johann Sebastian Bach (disponible ici). Ce Doodle propose à l’utilisateur de placer quelques notes sur une portée et génère une oeuvre étrangement ressemblante à ce qu’aurait pu proposer le compositeur allemand.\nTout l’aspect de composition proposé par ce Doodle est assurée derrière par un modèle de machine learning baptisé Coconet. Sans rentrer dans les détails, il s’agit d’une intelligence artificielle qui a analysé des partitions de Bach. Ensuite, on lui a donné un instrument d’un morceau de Bach, et l’intelligence devait retrouver ce qu’aurait composé Bach. À force de répéter cette opération sur un ensemble de morceaux suffisants (306 morceaux de chorales dans le cas présent), l’intelligence a alors été capable de réécrire des morceaux à la façon supposée de Bach. Coconet a fait l’objet d’un article de recherche intitulé Counterpoint by Convolution par Cheng-Zhi Anna huang, Tim Cooijmans, Adam Roberts, Aaron Courville et Douglas Eck.\nSans être hautain ou irrespectueux, si nous arrivons à avoir une intelligence artificielle capable de composer du Bach, je pense qu’il est possible de composer des musiques populaires modernes basées sur des structures musicales et des sonorités bien précises (par exemple, les fameux 4 accords magiques : Mi Maj - Si Maj - Do# Maj - La Maj). La machine a donc le pouvoir de composer.\nGénérer l’existant : le son\nLa seconde étape consiste alors à obtenir un son à faire palir l’Orchestre philharmonique de Berlin. Et vu qu’on parle de Berlin, on pourrait parler des travaux réalisées par Orchestral Tools pour enregistrer et fournir une interface pour les sons de l’intégralité de l’orchestre. Et le tout est disponible dans l’instrument virtuel Berlin Orchestra Inspire 1. On peut aussi parler de l’instrument virtuel pour les cuivres à faire palir les orchestres les plus imposants, mais on va en rester là.\nEncore mieux, j’ai eu l’occasion de travailler avec le nouveau VST Arkhis basé sur les outils de Orchestral Tools, et le résultat est simple : avec 3 accords, vous faites toutes les musiques d’ambiance des films, voire certains thèmes. Et il est certain qu’aujourd’hui, un bon nombre de compositeurs travaillent directement avec ce genre d’outils. Pour un exemple des capacités d’Arkhis, cette vidéo permet de voir un peu la force qu’à ce plug-in.\nLe charme d’un son passe aussi par un mixage de qualité pour rendre le son parfaitement audible. Et, même dans ce cas, il est possible d’y mettre de l’intelligence artificielle pour produire des sons de qualités. C’est notamment ce que propose LANDR proposant des masterings automatique soi-disant basée sur l’analyse de plus de 10 millions de masters. Et optionnellement, ils font la distribution.\nOn pourrait être tatillon en prétendant qu’il est compliqué à un ordinateur de produire une voix, mais quand je vois les progrès de l’instrument Vocaloid ainsi que les avancements dans la recherche sur le clonage de voix (démos disponibles ici), je pense qu’on va vite arriver à des choses incroyables.\nAvec un peu d’argent, il est donc possible de construire un pipeline de création musicale complètement électronique, capable de créer de la musique orchestrale (et bien plus encore), le tout de façon automatique.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nLes impacts possibles de la musique générative\nUne fin du droit d’auteur ?\nEn France et jusqu’à présent, si un artiste crée une oeuvre, il est assuré d’un droit de propriété incorporelle exclusif et opposable à tous (L111-1 du Code de la propriété intellectuelle). Néanmoins, que se passe-t-il lorsque la machine va créer une oeuvre ?\nLa législation française actuelle n’a aucune réponse sur ce point, mais plusieurs hyphothèses ont été abordées dans le cadre de la Mission Intelligence Artificielle et Culture réalisée par Alexandre Bensamoun et Joëlle Farchy par demande du Conseil supérieur de la propriété littéraire et artistique. Mais, comme nous allons le voir, chacune des solutions possèdent son lot de défauts qu’il est nécessaire de prendre en compte.\n1. Le droit d’auteur au concepteur·trice de l’IA\nL’idée la plus simple est que la personne qui a conçu l’intelligence créant la musique possède un droit d’auteur sur les créations. D’une certaine manière, le développeur·euse est responsable de ce que est l’IA (elle ou il l’a développé et a choisi son évolution par les jeux de données que l’IA utilise), et est donc responsable de ce que l’IA est censé produire.\nLa problématique principale levée sur cette argument est qu’il est impossible de prouver qu’une oeuvre a été générée par l’IA. Comment est-ce que je sais que le Doodle sur Bach a composé l’oeuvre que j’écoute, alors que je pourrais très bien être l’auteur de ce morceau ?\nEt, en allant un peu plus loin, comment faire appliquer ce droit d’auteur à une plate-forme comme Youtube ? Les robots de Youtube chargés de faire respecter le droit d’auteur (Content ID) n’ont aucun moyen de savoir si la personne qui a créé l’outil qui a créé l’oeuvre a donné son autorisation à la personne, car ils n’ont pas moyen de connaître l’outil derrière chaque morceau.\nDans la pratique, cette version du droit d’auteur n’est qu’applicable après analyse d’un humain, et encore, vu la progression récente des IAs dans le domaine des langues, les créations deviendront de moins en moins reconnaissables, et ce droit de plus en plus inapplicable.\n2. Le droit d’auteur à l’utilisateur de l’IA\nUne autre idée simple est que la personne qui utilise l’IA obtient le droit d’auteur de ce que l’IA va créer sur son matériel informatique. Il devient l’auteur de l’oeuvre créée par la machine.\nIci, le problème est que le droit d’auteur a été initialement créé pour permettre de protéger l’effort créatif, et que cet effort n’existe pas quand un utilisateur appuie sur un simple bouton pour créer une musique complète. On aurait alors une pléthore d’oeuvres sans effort créatif, et la signification initiale de l’oeuvre en serait que appauvrie.\n3. La création d’un nouveau droit\nCette idée couvre 3 notions différentes dont la finalité reste équivalente :\n\nla création d’un droit d’auteur spécifique à la création générée à la manière du droit du logiciel,\nla création d’un droit d’auteur à la manière d’un “droit voisin” (le droit d’auteur concernant les tiers indirects d’une musique comme les artises-interprètes),\nla création d’un droit sui generis à la manière du droit accordé aux producteurs de bases de données.\n\nSans rentrer dans les détails par faute de compréhension pointue, on considère ici que nous faisons face à un cas qui n’est pas couvert par le droit, et qu’une nouvelle catégorie de legislation spécifique à la création générée par intelligence artificielle est nécessaire.\nEst-ce qu’une nouvelle législation permettrait de corriger les problèmes levés dans le cadre des différents problèmes déjà énoncés ? Je n’ai malheureusement pas la connaissance nécessaire pour en juger.\n4. L’absence de droit privatif\nOn arrive à l’idée la plus simple : aucun droit d’auteur n’est défini pour les oeuvres générées par une intelligence artificielle. La raison principale est que la création la plus importante est la création de l’intelligence artificielle, qui est déjà rémunérée et soumis au droit du logiciel. Les créations ne sont qu’un résultat mécanique de la machine, et aucun processus créatif n’est pris en compte dans ce cas.\nOutre le fait qu’on assisterait à une massification pure et dure de la quantité musicale (potentiellement au détriment de la qualité), plusieurs détournements seraient possibles. Par exemple, pourquoi un artiste dirait que sa création proviendrait d’une intelligence artificielle alors qu’il serait couvert par le droit d’auteur (et potentiellement le droit voisin) dans le cas où il énonce qu’il est le créateur de la musique ? De même, qu’en est-il des musiques écrites par un humain qui seraient revendiquées comme musique d’une intelligence artificielle ?\n\nLes différentes propositions énoncées ici correspondent toutes à des choix relativement pertinents. Qu’il s’agisse d’une refonte de la loi jusqu’à l’abstention de toute modification, le choix sera essentiellement un choix politique, faisant état d’une position assumée vis-à-vis des créations artistiques des intelligences artificielles. La réflexion est déjà commencée, mais il est important de la poursuivre très sérieusement afin de déterminer non seulement notre position sur les oeuvres générées mais aussi notre vision de l’art génératif d’une manière générale.\nUne nouvelle écoute de la musique\nOutre l’aspect juridique, la musique générative pourrait avoir un impact artistique assez conséquent. Nous parlions précedemment de cette faculté qu’à la musique générative de proposer sans cesse de nouveaux morceaux, sans jamais sombrer dans la répétition. Nous avions aussi remarqué que, en général, nous préférions écouter des musiques que nous connaissons sur le bout des doigts. Qu’en serait-il si nous créerions des musiques avec la capacité de se modifier ?\nNous pourrions distinguer plusieurs types de modifications :\n\nla modification sonore ciblée : il s’agit simplement de modifier la façon qu’est synthétisé un son, comme lorsque l’on modifie l’enveloppe ou l’oscillateur d’un synthétiseur, ou que l’on ajoute un peu de distorsion sur une guitare.\nla modification sonore généralisée : on applique ici un effet léger un ensemble d’instruments, ou même à l’intégralité du morceau. Par exemple, l’ajout ou la modification d’un compresseur ou d’un égaliseur afin d’apporter un mixage différent au morceau.\nla variation temporelle : on modifie le rythme de la musique, en passant, par exemple, d’une version à 120bpm à une version à 115bpm. On pourrait même imaginer des musiques de genres comme la chillwave ou la downtempo avec des alternatives plus lourdes avec un tempo plus lent.\nla variation instrumentale : cette fois-ci, on change carrément l’instrument utilisé sur un morceau par un autre. Une partition jouée au glockenspiel pourrait être rejouée sur un xylophone ou un vibraphone.\nla variation mélodique : une mélodie serait modifiée en partie. Il est assez aisé d’imaginer une ou deux notes d’une mélodie qui serait jouées un ton plus haut, ou dont l’ordre serait modifiée.\nla transposition : on modifie la tonalité complète du morceau, en passant d’un morceau joué à partir d’un Mi Majeur en Mi Mineur ou en Fa Majeur. On pourrait alors imaginer des variantes plus bluesy d’un morceau rock.\nla variation structurelle : la structure de la musique est changée. On va modifier l’ordre d’entrée des instruments sur une progression, ou encore l’utilisation de ponts avant un refrain, et même le nombre de mesures dans un couplet.\nla différence rythmique : un rythme n’est pas forcément joué. Un compositeur pourrait prévoir des possibilités sur sa musique, et seulement certaines d’entre elles sont jouées.\netc.\n\nPar l’utilisation de ces modifications, l’écoute d’une musique serait renouvelée en permanence. Nous assisterions, d’une certaine manière, à un concert artificiel dont les possibilités seraient plus ou moins prévisibles, en alliant les capacités créatives de l’humain avec le pseudo-aléatoire de la machine.\nCet impact nécessiterait directement la refonte des systèmes audio existants (qu’ils soient software ou hardware) pour être capable de lire des morceaux variables, là où tous nos systèmes actuels ne font que lire bêtement des versions uniques d’un morceau.\nL’apogée des webradios génératives\nSur les plate-formes comme Twitch et Youtube, on peut retrouver des webradios diffusant (très souvent illégalement) des morceaux d’un ou plusieurs genres spécifiques, et ce en permanence.\nCe nouveau médium, descendant direct des radios de diffusion musicale, permet à des personnes d’écouter en permanence de la musique, et ce sans interruption aucune (a contrario des radios classiques). Il s’agit d’un moyen idéal pour être complètement concentré ou tout simplement pour découvrir de nouvelles musiques.\nD’une certaine manière, ces webradios pourraient être des fournisseurs de musiques génératives, offrant un moyen d’accès simple à de la musique adaptée pour la concentration et la relaxation de prime abord. On pourrait ensuite imaginer des radios diffusant des styles musicaux plus marqués, comme de la funk ou du metal, permettant une écoute sans cesse renouvelée.\nUne aide à la composition\nL’amélioration des techniques de générations sonores pourrait aussi devenir synonyme d’aide aux compositeurs. La machine pourrait aussi bien nous fournir une mélodie ou un rythme basé sur une idée en particulier (par exemple, un thème triste proposerait une mélodie en mineur avec un tempo lent) ou même construire un début d’orchestration en reconnaissant une mélodie chanté par un compositeur.\nL’idée ici n’est pas de remplacer les compositeurs·trices tels qu’iels, mais de les assister afin de donner le meilleur d’eux-mêmes et même d’obtenir des nouvelles façons de concevoir et de penser la musique. On retrouve notamment cette démarche avec les joueurs·euses de Go qui s’améliorent grandement à l’aide d’AlphaGo.\n\nLa musique générative est un concept incroyable qui, malgré son apparence, n’est pas contradictoire avec la musique “traditionnelle”. Elle permet de vivre des instants de bohneur au gré des bits, donnant la possibilité de créer des sons uniques et d’offrir un vecteur de changement à la musique traditionnelle.\nD’une certaine manière, j’ose penser que la musique générative est une évolution similaire à la musique numérique lorsqu’on était à la musique analogique, qu’il s’agisse d’une évolution des moyens de production ou des moyens de consommation. Il faut repenser toutes les techniques et les moyens de diffusion tels qu’ils existent aujourd’hui, pour ouvrir un nouvel univers que certains·nes précurseurs·euses expérimentent dés aujourd’hui.\n\nJe fais pas muzik  \nJe suis muzik\nChris Prolls\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMerci de votre lecture :)\n\t\t\t\t\t\t\t\t\t\t\t"},"Musique/La-musique-des-souvenirs":{"title":"La musique des souvenirs","links":[],"tags":["playlist","mémoire","souvenirs","pensine"],"content":"\nEt tout d’un coup le souvenir m’est apparu. Ce goût c’était celui du petit morceau de madeleine que le dimanche matin, à Combray. […] Mais, quand d’un passé ancien rien ne subsiste, après la mort des êtres, après la destruction des choses, seules, plus frêles mais plus vivaces, plus immatérielles, plus persistantes, plus fidèles, l’odeur et la saveur restent encore longtemps, comme des âmes, à se rappeler, à attendre, à espérer, sur la ruine de tout le reste, à porter sans fléchir, sur leur gouttelette presque impalpable, l’édifice immense du souvenir.\n\nMarcel Proust, sans le savoir, a défini au travers de ces lignes un concept simple mais puissant : la madeleine de Proust. Une odeur, un goût ou de manière plus générale une chose nous permet de revoir une situation, un moment, un souvenir. On entrevoit des réminiscences de notre passé au travers d’une chose.\nEt c’est un phénomène que j’apprécie particulièrement au travers des différentes facettes de la musique. Pour ma part, l’écoute permet de me remémorer de la situation au moment précis de mon passé où j’écoutais cette musique. L’écoute d’une composition perso est encore plus forte car cette composition retranscrit un état d’esprit précis avec lequel j’ai écrit le morceau.\n\nPour l’exemple, quand j’écoute cette musique, je me souviens que je venais d’arriver sur Grenoble (c’était il y a 9 ans au moment où j’écris ce post), et je revois encore le chemin du tramway que je prenais en plein été caniculaire. Je revois toutes les personnes que j’ai rencontré pendant mon court séjour dans les études de médecine, alors que je serais quasiment incapable de me souvenir de ça sans ce stimulus.\nEn fait, la musique est mon journal intime. C’est un peu comme la Pensine de Dumbledore, sauf que vous évitez les effets désagréables du type vous êtes un fantôme et les gens peuvent vous traverser ou encore la chute libre quand vous entrez dans le souvenir.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tEn plus, ça prend de la place ce truc-là.\n\t\t\t\t\t\t\t\t\t\t\t\nDu coup, si vous êtes intéressé•e pour faire ce travail d’archivage, vous avez juste à prendre votre plateforme de streaming musicale préférée, créer une playlist et retrouver tous les morceaux qui vous évoquent quelque chose et que vous avez écouté plus de 3 fois (critère arbitraire que vous pouvez changer comme vous le souhaitez). Ajoutez les morceaux à la playlist et triez-les dans l’ordre chronologique dans lequel vous avez découvert et écouté en boucle chaque morceau.\nCe travail va à la fois :\n - vous faire rire quand vous allez vous rappeler des morceaux que vous écoutiez en boucle il y a 10 ans.\n - vous faire déprimer quand vous allez réécouter certains morceaux sensibles.\nMais vous verrez, une fois que ça sera fait, vous pourrez vous rappeler de tout ce que vous avez fait juste en regardant votre playlist ! Et surtout, pensez à la mettre à jour avec vos nouveaux morceaux que vous écoutez beaucoup, et à rajouter d’anciens morceaux si vous en retrouvez.\nPour vous donner une idée de ce que ça donne, la mienne est actuellement à 172 titres.\n"},"Sociologie/Quid-d'un-monde-sans-travail":{"title":"Quid d'un monde sans travail","links":[],"tags":["travail","Rensi","reflexion","France"],"content":"\nLe travail c’est la santé  \nRien faire c’est la conserver  \nLes prisonniers du boulot  \nN’font pas de vieux os.\n\nC’est au travers de ces paroles que l’illustre Henri Salvador commence sa musique hautement célèbre dans la culture française. Point de vue simple : si vous voulez mourir vieux, ne travaillez pas. Mais est-ce que cette utopie anti-macroniste peut être une réalité là où la vie de tous les jours nous donne un contre-exemple pur et simple ? Peut-il y avoir un monde où l’oisiveté serait reine, tandis que le travail serait devenu une activité dont seul les anciens connaîtrait l’Histoire ?\n\nAvant d’entrer dans le vif du sujet, je tenais à vous remercier de votre initiative à lire ce court essai. Peut-être va-t-il vous intéresser, vous énerver, vous éveiller : mon but est simplement de vous offrir un angle de vue qui me semble intéressant à aborder. Il s’agit d’un résumé de ma réflexion sur plusieurs semaines à propos de la notion même de travail, en pleine période de débat sur la retraite française.\nBien évidemment, je n’effleure que la surface de la problématique : le sujet mériterait des années de travaux acharnés pour espérer offrir une réponse précise au problème. Je vous prie donc de prendre mes propos comme une base possible de réflexion, de les utiliser, les modifier, les transformer comme bon vous semble pour forger votre propre approche du problème.\nBonne lecture !\n\nLe sens de « travail »\nD’après le Larousse, le travail est : \n\nune activité laborieuse de l’homme considérée comme un facteur essentiel de la production et de l’activité économique\n\nOn retrouve dans cette définition un point très important : le travail est essentiel à l’activité économique. Il est l’activité qui permet de vivre financièrement, et qui permet à la société de générer des biens et des richesses.\nIl est important de souligner que cette définition du travail est indépendante du régime politique dans laquelle elle est appliquée : le travail restera toujours essentiel à la sphère économique de la société qu’il s’agisse d’une société capitaliste, communiste ou encore socialiste. Seul sa justification va changer : dans une société capitaliste, nous travaillons pour augmenter notre capital, tandis que dans une société communiste, nous travaillons pour augmenter le capital de tout le monde.\nOn travaille dans l’objectif d’avoir une vie meilleure, un plus grand confort, pour que nous puissions nous épanouir. Cette objectif est donc un intermédiaire vers une vie où travailler n’est plus qu’un lointain souvenir. Dés lors qu’un individu obtient tout ce qui est nécessaire pour vivre une vie épanouie, il n’a plus de raison de continuer de se contraindre à travailler, et peut laisser choir son activité laborieuse au profit d’une vie enrichissante.\n\nLe travail proprement dit est donc un esclavage et, à ce titre, répugne de manière irréductible à la nature humaine. C’est seulement dans le jeu, ou le travail-jeu (…) que l’homme est libre, qu’il fait ce qui lui plaît, que son esprit se déploie de façon pleinement autonome, ce en quoi il est vraiment homme et accomplit le destin le plus élevé et le plus noble de l’humanité. \n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tGiuseppe Rensi, philosophe et avocat italien\n\t\t\t\t\t\t\t\t\t\t\t\nLes mots de Giuseppe Rensi au travers de son essai Contre le travail nous amènent au constat suivant : le travail est esclavage, le travailleur est esclave. On détruit la nature originel de l’humain, de cet humain qui réfléchit, qui construit, qui choisit, au profit de l’humain qui exécute.\nL’humain est un être joueur : il aime faire des choses, non pas par intérêt, mais parce qu’il le souhaite. Il agit par conviction et par désir. Le travail ne suit en aucun cas cette définition : nous pouvons désirer l’objectif du travail, mais l’activité de base reste une contrainte, et donc à l’opposé de ce que nous recherchons naturellement. \nTravail et oisiveté \nAu travers des différents gouvernements français, un constat est réalisable assez facilement : l’oisif est une plaie qu’il faut haïr. Cet être est un nuisible qui empêche les autres de travailler. Qu’importe le nom qu’on lui donne (chômeur, feignant, assisté), on lui octroie une image que le Diable lui-même n’a jamais été capable d’obtenir.\nOn peut expliquer cette réalité par l’éducation française dont on nous vante tant les mérites. Dés notre plus jeune âge, nous avons été éduqué•e•s pour être des travailleurs•euses. L’éducation telle qu’elle existe en France mise essentiellement sur le fait qu’il faut former les enfants à travailler. Dés le primaire, le plaisir et l’épanouissement de l’enfant est mis de côté pour se focaliser sur l’acquisition pure et dure des savoirs. Les élèves sont contraints de travailler, ils sont évalués en permanence, et tout être oisif est puni et châtié.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tAnother Brick in the Wall Part 2 - Pink Floyd\n\t\t\t\t\t\t\t\t\t\t\t\nUne fois les enseignements primaires, secondaires et tertiaires passés, il est nécessaire de se frayer une place dans la société. Et la société ne nous reconnaît qu’à la condition que nous ayons un travail : elle nous doit une chose si nous lui donnons quelque chose. De fait, l’être oisif est quasiment invisible : étant donné qu’il ne donne pas de sa personne, il n’est pas un composant essentiel, et on lui permet simplement de vivre qu’à la condition qu’un jour, il devienne un travailleur.\nIl pourrait être intéressant d’étudier l’image de l’oisiveté et de ses pratiquants dans les différents médias (traditionnels et modernes). Pareillement, il pourrait être pertinent d’effectuer une autre étude sur la perception d’un oisif par un travailleur. Mais, de mon point de vue, ce n’est pas un très grand risque de dire que l’oisiveté est, pour la plupart, la mère de tous les maux du monde.\nUn monde sans travail\nFinalement, dans une période où l’on prône le retour à la nature, la low-tech, la slow-food, ne serait-il pas logique de revenir à cet état où l’humain ne redeviendrait qu’un être simple agissant par sa propre volonté ?\nLa solution à la gestion d’un monde sans travail peut être vu en regardant le fonctionnement de la société grecque dans l’Antiquité. Le travail manuel était un labeur honteux qui n’était effectué que par les esclaves. Mais cela permettait aux intellectuels de vaquer à leurs occupations. Cette organisation permet à une partie de la population de vivre idéalement, mais à la condition de sacrifier une partie de la population. Dans ce modèle, on crée un état de privilégiés et d’esclaves.\n\nQu’il y ait donc des êtres qui soient, par nature, les uns libres, les autres esclaves, c’est évident pour ceux pour qui l’esclavage est à la fois utile et juste.  \n— Les Politiques, Aristote- I, 5, § 11, p. 103\n\nLa solution grecque n’est pas en accord avec mes convictions : on construit une société qui est logiquement injuste, en différenciant deux types d’individus. D’une certaine manière, on peut poser le constat que la vie oisive idéale nécessite implicitement que tous les individus ne la vivent pas : il est nécessaire que les travaux à la base de la société soient accomplis. \nOn peut donc définir sur le sujet deux visions :\n - la vision élitiste : on permet à certains individus de s’épanouir parfaitement au détriment d’une majorité de la société (pas de temps de travail pour une minorité).\n - la vision communautaire : chacun peut prétendre à plus d’épanouissement, à la condition que chacun prenne également part aux travaux (diminution du temps de travail général car augmentation du nombre de travailleurs).\n \nDéshumaniser le travail\nUne troisième vision devient de plus en plus cohérent au fur et à mesure des années : les travaux sont assumés par les machines. La robotique a fait des progrès incroyables ces dix dernières années, notamment avec l’apogée des réseaux neuronaux. On possède donc des machines plus intelligentes, plus productives et non concernées par les problèmes existentiels humains.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nL’intérêt actuel de la robotique concerne l’augmentation de la productivité et la baisse de ressources humaines qu’il est nécessaire pour faire un projet. Le but est donc, de base, purement capitaliste, voir même militaire si on prend la robotique développée par Boston Dynamics. Mais, indirectement, on peut considérer que la destruction des emplois engendrée par la robotique (voir l’étude d’Oxford Economics) est une aubaine : la quantité de travail disponible dans les sociétés baissent au fur et à mesure des années, et cette baisse va nécessiter une reconsidération des conditions de travail existantes.\nÀ terme, on peut considérer que le temps de travail va nécessairement baisser, ce qui permettra au fur et à mesure : \n - dans le cas d’une vision élitiste d’augmenter le nombre de personnes pouvant prétendre à une vie oisive.\n - dans le cas d’une vision communautaire d’augmenter le nombre d’heures d’oisiveté de l’ensemble de la société.\nEn allant toujours plus loin, si les progrès techniques et technologiques continuent sans interruption, on peut prétendre à terme obtenir un monde où les machines s’occupent de tous les travaux essentiels à la vie de l’humain, et que celui-ci puisse prétendre à jouir de sa vie par sa propre volonté, et uniquement par celle-ci.\nConséquences de la fin du travail\nLa disparition du travail dans notre utopie aurait forcément des conséquences sur le fonctionnement global de la société. Tout d’abord, la société fonctionne normalement sur l’argent, et cet argent est distribué principalement par l’intermédiaire du travail. Il est donc nécessaire de trouver un modèle de société qui puisse répondre à une société sans travail (ou, au minimum, avec moins de travail). \nOn pourrait alors penser à un modèle basé sur un revenu universel, permettant à chacun de subvenir à ses besoins, et permettant ensuite à ceux qui le veulent de s’investir pour obtenir plus d’argent. Ce revenu garantirait une base de vie correcte, tandis qu’il serait possible aux gens de s’investir plus dans la société, qu’il s’agisse de travail rémunéré ou de bénévolat. Qu’importe que certains s’enrichissent plus que d’autres, que leur cupidité nécessite de s’extraire des plaisirs de la vie, tant qu’ils ne deviennent pas nocifs au bien commun. On peut entendre par là qu’ils n’exercent pas de contrôle sur les produits nécessaires à la vie, ou encore qu’ils n’obligent pas la société à se moduler pour leurs besoins. La richesse ne devrait être qu’un moyen d’obtenir plus de choses sans jamais que d’autres en obtiennent moins.\nLes humains pourraient alors jouir de leurs activités et sortir d’un état de stress et de décrépitude que nous ne connaissons que trop bien de nos jours. Mais il est important que la diminution du temps de travail implique plus de temps libre, et ce temps libre nécessite d’être dépensé. Il est nécessaire que chacun puisse avoir de quoi se distraire, se cultiver, s’épanouir, se former, ou encore s’évader. D’une certaine manière, l’industrie des loisirs (sportif, culturel, etc.) prendrait alors une part encore plus importante qu’elle ne l’est déjà aujourd’hui. André Gorz avait déjà formulée cette pensée, sans forcément penser à l’exécution de sa formule (voir Métamorphoses du travail). Car si la conséquence est prévisible, il est nécessaire de savoir comment il est possible de répondre à cette demande en gardant toujours le même postulat en tête : les gens ne travaillent plus.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nNous nous retrouvons donc dans une société qui est censés produire une certaine quantité de biens et de faits culturels, mais il est nécessaire de produire ces choses. Notre postulat initial étant que la robotique remplacerait la main d’œuvre pour produire les biens de la société, est-ce réellement applicable au domaine de la culture ? Est-ce qu’un robot peut produire un film, composer une musique ou faire un concert ?\nPar extension, on peut considérer qu’il est nécessaire de contrôler et de maintenir les machines qui produisent. On peut considérer qu’un monde dans lequel les robots s’occupent d’eux-mêmes entre eux pourra exister, mais il s’agit probablement de notre vision utopiste poussée à l’extrême. En conséquence, l’humain a besoin de contrôler et de maintenir les productions des machines pour qu’elles continuent de produire suffisamment de choses pour que chacun•e puisse vivre à son aise. On retrouve donc, dans notre monde idéaliste, une certaine quantité de personnes qui doivent travailler pour le bien commun de tous. Est-ce que le travail est nécessaire, de fait, dans un monde qui souhaite faire disparaître le travail ?\nEnfin, pour que nous jouissions d’un confort de vie toujours plus élevé et continuer de maintenir l’humanité dans l’évolution, il est nécessaire de conserver un certain nombre d’esprits dévoués à la recherche et l’innovation pour le bien commun. De fait, on retrouve donc, sous le prétexte du bien commun, une nouvelle frange de la population qui travaille, et ce encore une fois a contrario de notre postulat de départ. Est-ce donc réellement possible de concevoir une organisation du monde où le travail n’existe donc plus ?\nTravail et jeu\nPour répondre à ces problématiques, Rensi a formulé que le contraire de la notion de travail est la notion de jeu. Il considère que le jeu correspond à l’essence de l’humain : nous jouons car nous décidons de jouer, de faire l’activité qui nous semble intéressante. Le jeu devient travail à partir du moment où l’on joue par contrainte. Le joueur•euse de football amateur joue par plaisir, tandis que le joueur•euse de football professionnel le fait pour vivre.\nEst-ce qu’il est possible de prendre du plaisir dans le travail ? La réponse est oui, et c’est la séparation que Rensi crée dans sa vision du monde. On trouve donc le travail-jeu qui implique la contrainte mais qui nous fournit une activité qui nous procure malgré tout du plaisir, tandis que le travail-travail est purement douleur. Le premier offre une activité qui nous stimule suffisamment selon nos critères pour que nous soyons bien dans cette activité, tandis que le deuxième n’offre rien d’épanouissant.\nDe cette vision à 3 catégories, on peut concevoir une autre conception d’un monde sans travail. On peut réfléchir à un monde dans lequel le travail-travail est voué à être exécuté par la robotique, tandis que le travail-jeu et le jeu reste la propriété humaine. On énonce alors que l’humain nécessitera forcément de produire des choses pour se développer lui-même.\nPour illustrer cette vision, on peut prendre l’exemple du compositeur qui écrit sa musique pour illustrer son art, transmettre une pensée, une émotion. Le compositeur développe sa façon de concevoir à travers l’évolution de ses compositions. Pareillement, le réalisateur de films cherche à raconter une histoire, à montrer le monde sous un angle différent, ou encore à atteindre le spectateur à travers son œuvre. Nous sommes dans le jeu. Cependant, dans ce cas-ci, l’humain a besoin de l’aide d’autres humains pour réussir à mener à bien le projet de film. Ces personnes vont donc travailler sous la contrainte du réalisateur, mais dans un même but : construire une œuvre dans laquelle ils prennent du plaisir. Ils sont stimulés par la création de ce projet.\nCes humains font donc partis de ce que l’on a nommé précédemment le travail-jeu : ils sont contraints d’effectuer une tâche, mais cette tâche leur permet de s’épanouir. Il apporte des idées, expriment leurs opinions et permettent d’aboutir à une vision collective à travers une unique entité. Il est nécessaire qu’il y ait un intérêt réel dans le projet, faute de quoi nous retombons dans le cas du travail-travail où l’esprit laisse sa place à l’exécution pure et dure des tâches.\nRepenser le travail\nNous avons donc défini une vision du monde tel que le travail n’est plus le moteur mais un composant. Chacun contribue à la société parce qu’il en a décidé. Les travailleurs côtoient les oisifs sans qu’il y ait une quelconque jalousie, car chacun fait ce qu’il lui plaît. Et c’est cette notion qui différencie le monde actuel de notre utopie : les individus ont le choix.\nSi cela peut paraître simplet, abstrait ou naïf, il me semble que c’est pourtant un des problèmes qui détruit à petit feu une société comme la France : les gens n’ont plus le droit de choisir ce qu’ils doivent faire de leur vie. Ils doivent suivre une voie toute tracée, effectuer des actions dans des créneaux horaires bien définis, et vivre cette vie jusqu’à, pour les chanceux, que la retraite arrive, et pour les autres, jusqu’à ce que la mort les sauvent.\nCe schéma de vie français, signé de la patte dure du libéralisme, construit sur l’édifice de l’élitisme républicain, octroie une vie humaine à ceux qui ont eu le privilège de naître à l’abri de leur nom. Il est une prison où la richesse devient une libération. Sans ça, le travailleur est voué à traîner son boulet pendant que l’institution dirigeante continue sans cesse de le fouetter pour qu’il aille toujours plus vite.\nEt là où le bât blesse, c’est que l’évolution de la société vise actuellement à créer des travailleurs sur une plus longue durée que ce que nous avions auparavant ! Si cela peut se justifier au premier abord sur l’argument de la durée de vie, il n’empêche que, d’une part, il est justifiable que le travail est plutôt antonyme de la notion de confort du corps. Il s’agit du principe même de pénibilité qui permet de savoir si un travail va nous amener plus ou moins vite à l’hôpital. De plus, sur le plan philosophique, nous passons nos plus belles années, celles où nous construisons le plus notre moi, notre intellect, notre physique, nos relations, nos projets, bref, notre vie, à subir le travail en espérant une retraite heureuse. N’est-il pas logique de penser à profiter de notre vie avant de se retrouver dans cette longue agonie qu’on nous promet depuis notre naissance ?\nIl est important de reconsidérer la part du travail dans la société, et la construction de celui-ci. Les années passent, la 203e décennie après Jésus-Christ a débutée, et pourtant le vent semble tourner de plus en plus en faveur de la richesse individuelle, le confort de sa personne et la mort de la communauté. L’évolution de la société passe par celle de ses fondements, et il est primordial que le débat sur le travail s’ouvre pour construire un idéal dans lequel chacun peut construire, s’épanouir, et tout simplement vivre.\n\nMaint’nant dans le plus p’tit village  \nLes gens travaillent comme des sauvages  \nPour se payer tout le confort  \nQuand ils l’ont, eh bien, ils sont morts.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tHenri Salvador, quel bel homme !\n\t\t\t\t\t\t\t\t\t\t\t"},"Sociologie/Vers-une-nouvelle-conception-du-travail":{"title":"Vers une nouvelle conception du travail","links":[],"tags":["travail","france","remuneration"],"content":"Note : n’étant ni économiste ni sociologue, je ne vise qu’à apporter quelques pistes de réflexion qui, j’espère, seront au mieux source de lectures approfondies, au pire source de critiques hardies.\n\nCe que nous appelons “travail” est une invention de la modernité. […] S’il nous arrive de parler du “travail ménager”, du “travail artistique” ou du “travail d’autoproduction”, c’est en un sens fondamentalement différent de ceux-ci qu’a le travail placé par la société au fondement de son existence, à la fois moyen cardinal et but suprême.\n\nC’est en ces mots qu’André Gorz commence la première partie de son essai relatif aux Métamorphoses du travail. Le travail dont nous parlons, ce travail qui nous habille d’un statut social et nous permet de recevoir de l’argent, est la source essentielle de la vie dans la société française. Il correspond à cette activité où nous faisons profiter nos compétences physiques et/ou intellectuelles contre de l’argent.\nEn général, un·e travailleur·euse est rémunéré·e en fonction de son temps de travail, et potentiellement en fonction de sa productivité. Iel vit professionnellement en suivant un cycle de travail défini sur une à quatre semaines (d’après la législation française). Ce cycle est réitéré et peaufiné durant l’intégralité de sa carrière, sauf cas de vacances, de maladies et/ou d’événements exceptionnels qui vont réduire le nombre de jours travaillés.\nDans le modèle actuel, un·e travailleur·euse peut travailler plus que le nombre d’heures de son cycle, lui faisant bénéficier d’un meilleur salaire ou d’un temps de congé plus élevé. Mais, dans tous les cas, iel reste coincé dans son cycle jusqu’à l’arrivée à la retraite (qui s’éloigne de plus en plus aujourd’hui, faute de la médecine) ou, plus logiquement, jusqu’à l’arrivée d’un raz-le-bol du quotidien, par la manifestation d’une démission, de pathologies psychologiques ou encore de burn-outs.\nLe problème n’est pas la faute du travail : il est un devoir pour prétendre à être une personne de la société. Je donne mes compétences à la sphère publique, donc j’ai le droit d’exister dans cette sphère publique. Cependant, même s’il peut être un vecteur d’épanouissement pour certaines personnes, il n’en sera jamais le cas pour toute la population, là où certains politiques cherchent à nous faire croire l’inverse.\nL’épanouissement de chacun·e passe souvent par d’autres activités regroupées sous l’étiquette de loisirs. On pourrait définir ces activités comme ayant pour objectif de consommer notre temps libre sans but économique, par opposition au travail qui génère de l’argent avec du temps libre. Les loisirs sont très souvent une part importante du développement de soi, car ils permettent de créer des relations sociales, de développer de nouvelles compétences, d’acquérir d’autres connaissances, etc.\nLà où le bât blesse, c’est que le partage de notre vie entre travail et loisir se fait en suivant des cycles adaptés pour le travail et non pour le loisir. En tant qu’individu, si je souhaite prendre du temps pour découvrir une nouvelle langue ou apprendre un nouvel instrument, je ne peux qu’effectuer des activités qui me le permettent entre mes horaires de travail. Je n’ai cependant pas la possibilité de m’investir complètement dans un projet de vie, sauf si je prends une année sabbatique dont le succès reposera sur les économies que j’ai eu le temps de mettre de côté.\nBriser les cycles : le modèle de Gorz\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tAndré Gorz, philosophe et journaliste français\n\t\t\t\t\t\t\t\t\t\t\t\nLe modèle de Gorz (que je nomme ainsi car il s’agit d’un modèle de société dont il est l’auteur dans Metamorphoses du travail) est une théorie reposant sur une autre conception des cycles de travail.\nSa théorie est qu’un·e travailleur·euse ne possède plus un cycle de travail réparti sur quelques semaines, mais sur au minimum une année. Iel possède un quota annuel d’heures à effectuer (entre 1600 et 1800 en France), et organise son travail en fonction de ce nombre d’heures. Il est alors possible de créer des plannings de travail permettant d’alterner des semaines de travail intensives avec des semaines de congés.\nUn·e travailleur·euse peut donc être beaucoup plus actif·ve au travail pendant une période, de façon à pouvoir profiter de ses loisirs pendant une autre période. La rémunération d’un·e travailleur·euse ne serait donc plus lié à ses heures qu’iel a effectué·e dans le mois, mais correspondrait à 1/12e de son salaire annuel, et ce quelque soit ses horaires. C’est déjà le cas des animateurs et des professeurs, dont leurs temps de travail sont annualisés.\nLa théorie peut aussi être étendue à un quota de temps à vie, permettant à chacun·e de choisir des longues périodes de travail et de loisirs. On peut comparer cette idée à une sorte de revenu universel, sauf que le revenu serait garanti par le fait que la personne a un devoir de travail envers la société.\nPréparer l’avenir : la réduction du temps de travail\nUn des problèmes majeurs qui arrive au fur et à mesure de l’évolution est qu’il n’y aura plus assez de travail pour tout le monde. Les avancées dans la robotique et l’intelligence artificielle détruisent des postes de travail au fur et à mesure des années. Une étude menée par l’entreprise Oxford Economics prévoit la perte de 20 millions de postes dans le monde d’ici 2030, sans pouvoir prévoir la suite et les évolutions de l’intelligence artificielle.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tSource : Rise of The Robots, Oxford Economics, p. 22\n\t\t\t\t\t\t\t\t\t\t\t\nCe n’est pas un cas d’urgence, mais il est nécessaire de prévoir une société du futur où chacun puisse travailler pour subvenir à ses besoins. La réponse actuelle souvent proposée par des partis de gauche concernent l’implémentation d’un revenu universel permettant de subvenir aux besoins de base de tout individu.\nUne autre théorie possible est tout simplement de réduire le temps de travail en fonction du nombre de postes disponibles. Cela permettrait d’assurer à chacun·e un emploi permettant de vivre, en plus de pouvoir faire grandir les secteurs liés aux loisirs, comme les secteurs culturels et associatifs. Les gens possédant plus de temps pour vivre, il serait donc nécessaire de trouver des activités dans lesquelles dépenser ce temps.\nDe plus, la réduction du temps de travail n’implique pas directement de baisse de productivité. D’après cet article de la BBC, plusieurs expériences ont été menées en Nouvelle-Zélande, en Suède et en Islande sur des travailleurs·euses dont le temps de travail a été réduit. Aucune réduction de productivité n’a été constatée, et il a même été remarqué une amélioration dans le service client d’une entreprise.\nCette théorie de réduction du travail s’adapte parfaitement avec le modèle de Gorz : il suffit simplement de réduire le quota annuel de travail par personne pour pouvoir moduler le nombre de postes disponibles. Les plannings des travailleurs·euses seraient alors plus intermittents, avec de plus longues périodes pour les loisirs.\nComme une alternative à la rémunération monétaire\nTout·e travailleur·euse récupère un salaire de son travail. Au fur et à mesure de sa carrière, iel reçoit de nouveaux avantages en nature et/ou monétaires.\nUne application possible de la réduction du temps de travail serait que les entreprises puissent proposer, dans le cadre des avancées de carrière, la réduction du temps de travail du travailleur·euse.\nCritiques du modèle de Gorz\nJe trouve le modèle de Gorz fascinant, mais malheureusement, des interrogations restent en suspens :\nComment, en tant qu’entreprise, gérer l’intermittence de l’emploi des travailleurs·euses ?\nTous les modèles de gestion des entreprises sont basés sur le fait d’être au même endroit au même moment. Je pense qu’il y a déjà des éléments de réponses dans les méthodes de gestion du télé-travail, mais qu’il est nécessaire de pousser la réflexion non plus sur un problème géographique mais temporel.\nQuelles sont les règles à fixer pour ne pas tomber dans un modèle de sur-exploitation des travailleurs·euses ?\nLa mise en place d’un quota a minima annuel nécessiterait une refonte du Code du travail, et de définir des règles pour éviter à un·e travailleur·euse de travailler 35 heures en 2 jours, de travailler 6 mois d’affilée avec 10 jours de repos etc.\nIl s’agirait d’un travail extrêmement important à mener au cours de discussions entre syndicats et politiques, nécessitant probablement de multiples expérimentations afin de déterminer les limites des quotas de travail.\nEst-ce qu’il est nécessaire de fixer des objectifs de quota minimaux pour assurer le devoir entre travailleur·euse et société ?\nDe mon point de vue, il serait nécessaire de régir les quotas de travail par des paliers à atteindre au bout d’une période fixe pour éviter qu’une dette trop forte se crée entre la société et le travailleur·euse. Cela casserait une partie de la flexibilité de ce modèle, mais permettrait d’avoir une sécurité de la société vis-à-vis des individus.\n\nAndré Gorz nous a livré une vision sociétale qui a le mérite de penser aux travailleurs·euses, et à leur conception de la vie, partagée entre le devoir qu’implique la société (le travail) et le droit qu’elle leur offre (le loisir). L’intermittence que propose son modèle est une solution intéressante à des problèmes bien actuels.\nNous vivons une époque complexe : les politiques des gouvernements continuent de se focaliser sur l’emploi sans pour autant remettre en question sa place dans la société d’aujourd’hui. Au lieu de tester de nouvelles visions du monde, on se cantonne à des idées recyclées encore et encore. Il est nécessaire que nous allions de l’avant, et que nous proposions des modèles où puissent s’unir devoir du travail et droit du loisir.\n--- \nMerci d’avoir lu cet article.\nJe tenais, comme d’habitude, à remercier Jean “HackJack” B. qui, une fois encore, a sauvé cet article de la débauche orthographique.\nSi jamais vous avez d’autres idées ou des lectures relatives au domaine, je serai curieux d’y jeter une partie de mon esprit. N’hésitez pas à en faire part !\nEt comme d’habitude, le gif de la fin :\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tCute lizard thanks you for reading\n\t\t\t\t\t\t\t\t\t\t\t"},"index":{"title":"🏠 Home","links":[],"tags":[],"content":"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nTel le Michael Scott qui vogue au gré des clients et des ramettes de papier sur son Segway©, je vous souhaite la bienvenue sur cette magnifique page de ce magnifique site de cet absurde Internet.\nIci, vous pourrez lire des articles, des essais et autres torchons rédigés sans autre prétention que de partager mes opinions les plus chaudes de votre région. Je parlerai sûrement de domaines dont je n’ai aucune compétence tel le meilleure intervenant de CNews. Vous êtes donc chaleureusement invité•es à conserver votre esprit critique lors de toute lecture dans cet endroit.\nPour votre information, je travaille dans la tech, je suis également musicien et g@m3rz, je lis de la sociologie pour paraître fûté en société, je hais le capitalisme et le libéralisme, j’écris en inclusif, et si l’un de ces points vous dérange, vous pouvez fermer l’onglet de votre navigateur sans aller plus loin.\nVous avez également mes réseaux sociaux en bas de toutes les pages pour pouvoir collecter plus d’informations sur moi en cas de besoin. Bien évidemment, si vous souhaitez me contacter pour m’insulter me remercier, passez par Mastodon.\nBonne lecture !"}}