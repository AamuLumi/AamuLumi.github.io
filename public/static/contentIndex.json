{"Dev/I've-never-understood-Redux,-so-I-rewrote-it.":{"title":"I've never understood Redux, so I rewrote it.","links":[],"tags":["javascript","redux","react"],"content":"I’ve been using Redux for a few years. It’s cool! I can manage the state of my application in a single Store with many reducers. But… wait, what is really a store? A reducer? An action? Let’s decrypt it!\nNote: I wrote this article after having prepared a talk on the same subject. This article is more or less this talk’s retranscription (with all I want to say on the subject). If you’re interested, I can present the talk at some conference, so you can contact me at florian[at]kbdev[dot]io. Thanks a lot and have a good read!\nYeah, Redux! Honestly, I know there’s so much better ways to store state and all the things related to Redux. But I began to write React applications with it, and it was cool. Except I remember when I began to use it, it looks like learning to play Dwarf Fortress.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tReplace Dwarf Fortress with Redux\n\t\t\t\t\t\t\t\t\t\t\t\nEach time I wrote an action, I was sure some strange bugs would happen. What did this dispatch function do? How could I connect it to my React app? And, clearly the best: how could I write this f*cking async function?\nAfter writing a Typescript typed version of Redux, I saw the light: Redux is incredibly simple. I can now (and, after reading this article, you will be able to) write a Redux in 5 minutes. With async and history handling. Sounds cool huh?\nLet’s do some magic!\nWhat is Redux?\n\nA predictable state container for JavaScript apps.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMe. I&#039;m a penguin.\n\t\t\t\t\t\t\t\t\t\t\t\nHmmm … let’s try something better.\nImagine Redux like a big object which contains all global variables of your application. You cannot mutate directly this object. You need to call some functions to change it.\nA simple example is saying Redux is your bank. You have an amount on your account and you can only change this amount by doing some operations. An operation is an action (or mutation) and your account is the Store’s data.\nAction — I do an operation\nEach mutation is done by passing an action.\nAn action is just a simple Javascript object with a unique key (to recognize which action we are doing) and the data of the action. This little object is given to a function dispatch() which sends it.\nIn the bank example, an action is something like this:\n{\n\t&quot;type&quot;: &quot;ADD_AMOUNT_ON_ACCOUNT&quot;,\n\t&quot;value&quot;: 23.96\n}\nTo avoid doing some errors when typing the unique key of the action, we can create an Action Creator. This is just a function which creates the object. Something like this:\nconst ADD_AMOUNT_ON_ACCOUNT = &quot;ADD_AMOUNT_ON_ACCOUNT&quot;;\nconst REMOVE_AMOUNT_FROM_ACCOUNT = &quot;REMOVE_AMOUNT_FROM_ACCOUNT&quot;;\n \nfunction addAmountOnAccount(amount) {\n  return {\n    amount,\n    type: ADD_AMOUNT_ON_ACCOUNT\n  };\n}\n \n \nfunction removeAmountOnAccount(amount) {\n  return {\n    amount,\n    type: REMOVE_AMOUNT_ON_ACCOUNT\n  };\n}\n \nmodule.exports = {\n  ADD_AMOUNT_ON_ACCOUNT,\n  REMOVE_AMOUNT_FROM_ACCOUNT,\n \n  addAmountOnAccount,\n  removeAmountOnAccount\n};\nReducer — I treat the operation\nEach variable available in the application is a reducer.\nA Reducer is a function which returns the data for the current variable. It can be, for example, the state for the option “dark mode enabled” of your application. Or, in the bank example, the amount of money on all accounts.\nconst {\n  ADD_AMOUNT_ON_ACCOUNT,\n  REMOVE_AMOUNT_FROM_ACCOUNT\n} = require(&quot;./accountActions&quot;);\n \nmodule.exports = function accountAmount(state = { value: 0 }, action) {\n  switch (action.type) {\n    case ADD_AMOUNT_ON_ACCOUNT:\n      return { value: state.value + action.value };\n    case REMOVE_AMOUNT_FROM_ACCOUNT:\n      return { value: state.value - action.value };\n    default:\n      return state;\n  }\n};\nEach time you give a new action to a reducer, it will check if this type of action must be handled. If that is the case, the reducer will create a new output value which corresponds to the reducer new state.\nThese functions must be pure and without any side effect. These two conditions just tell:\n\na function must return the same result with the same arguments. (ex: a function which computes an addition is pure.)\na function must not do any modification to the environment. (ex: a function which mutates an argument has a side-effect.)\n\nThese conditions allow Redux to be completely predictable. If your functions always do the same things with the same arguments, you will always get the same result by computing the same sequence of actions at any time. So you can easily test your code or create reproducible error logs.\nThe default state is here because (spoiler alert) the Store dispatches any action to all reducers. So we need to return the current state if the treated action hasn’t any incidence on the current reducer.\nStore — Where all happens\nUntil here, we didn’t have code any Redux file. Because Redux is just the Store. This is where all the magic happens.\nA Store is an object which propagates actions in reducers and keeps the current state in memory. In Redux, you can also listen to any change in the Store with the subscribe() method.\nFor the bank, the Store is the system which handles operations. The Store calls the system, and the system updates accounts.\nTo create the Store, we will use a simple ES6 Class with 2 attributes: state to keep the last state of the application and reducers to keep the reducers of the application.\nclass Store {\n  constructor(reducers) {\n    this._reducers = reducers;\n    this._state = {};\n  }\n}\nThe next step is one of the biggest steps we will do: creating the dispatch function. This is the famous function which does all the job in Redux.\nThe algorithm is :\n\n1: Get all reducers\n2: Create an object NextState.\n3: For each reducer R with its name Name, call the reducer R and store its result in NextState[Name].\n4: Replace the previous this.state by NextState.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nYeah. That’s all. Nothing more.\nWriting this code is not really complicated. I use the Array.reduce() method to call each reducer and compute a new state.\nclass Store {\n  constructor(reducers) {\n    this._reducers = reducers;\n    this._state = {};\n \n    // Don&#039;t forget that because dispatch() can lose its context\n    this.dispatch = this.dispatch.bind(this);\n \n    // We also add a init call to create the default state of Store\n    this.dispatch({type: &#039;__INIT__&#039;});\n  }\n \n  dispatch(action) {\n    // Get all reducers names\n    const reducersNames = Object.keys(this._reducers);\n \n    // Compute the new current state of the application\n    //  by propagating the action\n    const nextState = reducersNames.reduce((newState, name) =&gt; {\n      // Just call each reducer with the current state of the reducer\n      //  and the action\n      newState[name] = this._reducers[name](this._state[name], action);\n \n      return newState;\n    }, {});\n \n    // Keep the new state in memory\n    this._state = nextState;\n  }\n \n  getState() {\n    return this._state;\n  }\n}\nI also added the getState() method which only returns the current state of the Store. To be Redux-compliant, we also need two things: subscribers and middlewares. We will not speak about middlewares: they are not extremely difficult to implement, but you don’t probably need them because you can add everything you need directly in your own version of Redux.\nFor friends of the Gang of Four, subscribers are a simple Observer pattern.\n// Long version for the Observer pattern. Go to the next comment if you don’t need it.\nAn Observer is one of the simplest patterns described in the Design Patterns book from Gamma, Helm, Johnson, and Vlissides (the Gang of Four), an OOP design patterns book. This pattern is also known as Listener or Subscriber.\nYou need at least two objects to use this pattern:\n\nthe Subject is the object we are waiting for information. When this object will do an update, it will send its new state to all Observers.\nan Observer is an object waiting for an update of the Subject. It will do something when the Subject tells him it has been updated.\n\nThis pattern allows to add and to remove any new Observer to the Subject at any time, so we have a low dependency between our objects.\nIn our case, the Subject is the Store.\nTo implement this pattern in Javascript, we only need to add a subscribe() method which will return the unsubscribe() method when we add a Subscriber and keep the new subscriber in an array of subscribers. And we must add the call to the subscribers when a new state is created.\n// End of long version for the Observer pattern.\nIn term of code for subscribers implementation, we got this.\nclass Store {\n  constructor(reducers) {\n    // ... \n \n    // New code\n    this.subscribers = [];\n  }\n \n  dispatch(action) {\n    // ...\n    \n    // New code : call each observer with the new state\n    this.subscribers.forEach((subscriber) =&gt; {\n      subscriber(this._state);\n    });\n  }\n \n  // New code\n  subscribe(subscriber) {\n    this.subscribers.push(subscriber);\n \n    // Return the unsubscribe function\n    return () =&gt; {\n      this.subscribers.splice(this.subscribers.indexOf(subscriber), 1);\n    };\n  }\n}\nNot a lot of code. That’s cool.\nAnd… you have your version of Redux.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tYou.\n\t\t\t\t\t\t\t\t\t\t\t\nEheh. Yes. Dan Abramov got 46000 stars on Github with this. Our prophet has one of the best number of lines/stars ratio of Github. (If you’re reading this and you’re Dan, please, I want a dedicated portrait of you on my desk. We can marry us too, but a portrait can be a good beginning.)\nTime to go to Redux++\nOk, we have the basis. But I’m sure you want to have at least one of the most complex feature to deal with Redux: asynchronous function handling.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMy brain. Your brain. Everyone’s brain reading that.\n\t\t\t\t\t\t\t\t\t\t\t\nIt’s ok. We will do this together. Without banned words like thunk and saga and any-way-to-do-async-without-doing-anything-but-I-never-understood-this.\nOur async handling system will use functions. We will consider that action can be a function instead of an object. This function will take the dispatch() method from the Store as parameter. So we can create an action that will call himself the dispatch() method when we need to dispatch a new action.\nconst ADD_AMOUNT_ON_ACCOUNT = &quot;ADD_AMOUNT_ON_ACCOUNT&quot;;\nconst REMOVE_AMOUNT_FROM_ACCOUNT = &quot;REMOVE_AMOUNT_FROM_ACCOUNT&quot;;\n \n// For the fun, it simulates the same process\n// than Paypal when you want to verify your account\nfunction verifyAccount() {\n  return (dispatch) =&gt; {\n    dispatch(removeAmountOnAccount(0.30));\n \n    // Simulate asynchronous treatment\n    setTimeout(() =&gt; {\n       dispatch(addAmountOnAccount(0.30));\n    }, 1000);\n  }\n}\nIn this case, we are just considering that any action which is a function is an Async Action. So we just have to check if the action in dispatch() is a function and call it in this case. Else, only do what we did before.\nclass Store {\n  // Just renamed the old dispatch to _dispatch\n  _dispatch(action) {\n    const reducersNames = Object.keys(this._reducers);\n \n    const nextState = reducersNames.reduce((newState, name) =&gt; {\n      newState[name] = this._reducers[name](this._state[name], action);\n \n      return newState;\n    }, {});\n \n    this._state = nextState;\n \n    this.subscribers.forEach((subscriber) =&gt; {\n      subscriber(this._state);\n    });\n  }\n \n  // New code\n  dispatch(action) {\n    if (typeof action === &#039;function&#039;) {\n      return action(this.dispatch);\n    }\n \n    this._dispatch(action);\n  }\n}\n5 new lines of codes. You can write only one line with a fat-arrow and a ternary operator.\nAnd now you are handling async functions.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tYou. Me. Everyone.\n\t\t\t\t\t\t\t\t\t\t\t\nThe best thing is you can write every system you want based on Redux. If you are totally Redux-compliant**, you can replace your current redux with your own new system in react-redux. That’s what we did on an internal project at KBDev.\nRedux is minimalist and magic. It’s the perfection.\nI’m not sure for this statement.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tYou.\n\t\t\t\t\t\t\t\t\t\t\t\nHmm yes, I wrote this article on Redux and I’m saying that this library is not a solution for all problems.\nWe must think about a few things.\nFirst, if you are using React, there’s a lot of API features which will be soon added. Just take a look at the Context API, the Suspense API or the amazing Hooks API. All of these APIs are solutions for problems where Redux was used.\nSecondly, in an article named You Might Not Need Redux from our lord Dan himself, he wrote we perhaps need Redux because we don’t have understood how to code with React.\n\nHowever, if you’re just learning React, don’t make Redux your first choice.\nInstead learn to think in React.\nCome back to Redux if you find a real need for it, or if you want to try something new. But approach it with caution, just like you do with any highly opinionated tool.\nIf you feel pressured to do things “the Redux way”, it may be a sign that you or your teammates are taking it too seriously. It’s just one of the tools in your toolbox, an experiment gone wild.\n\n{% include image.html url=“/assets/images/danAbramov.jpeg” description=“The Lord and Saviour of the Earth.” %}\nThirdly, I wrote this article to prove you that you don’t always need to do an npm install each time. A lot of libraries are just some concepts you can recreate and complete with your needs.\nLastly, Redux must be appreciated like a design pattern instead of a library. We need to remember how we can create some simple state management software with reducers. You can reuse this pattern to make internal reducers for components or anything else. For example, I’ve done an HTTP fetch hook based on an internal reducer. And it works like a charm.\nHere’s an example I wrote;\nWe need to remember that we can invent things. I’m sure if you have read this article you are interested in how software pieces work. On how can we create complex systems with just some lines of code. That’s what we have to do: always learn new and efficient ways to do a better job. And that’s the magic of our job: we are paid to hit our f***ing keyboard to display rainbows and unicorns on all screens of the universe. And that’s cool! So let’s do some great unicorns instead of evil and ugly dead hell pony!\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nThere’s a Github repository with all the code of this article and my own Typescript special version of Redux called Zebulon. All are available here: Redux-Recoded repository. You can use this code in your projects. And if you have some questions, just ask them in comments, I will try to answer them.\nThanks a lot for reading! :)\nAnd thanks for Jean Batista and Jérémy Turon for correcting my bad English."},"Dev/Type-the-Untypable":{"title":"Type the Untypable: 101 for Advanced Typings in Typescript","links":[],"tags":["typescript","hints"],"content":"You use Typescript. You want to type the world. But you don’t want to read the whole Typescript doc. So here I come with this introduction to Typescript advanced typings with all type tricks you need.\nNote: this article is not an introduction for Typescript beginners. I’m considering you’re here with a bit of Typescript experience and you need to go further in Typescript world. If you never used Typescript, please take a look at lease to this tutorial and take the time to manipulate some Typescript code.\n\nTypescript in 5 minutes: https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\n\nDynamically type a function\nYou need to create a function which can have different returns types according to its parameters.\nCode\nconst f = &lt;T&gt;(param1: T): T =&gt; { return param1; }\nUsage\nconst createStore = &lt;T&gt; (mainReducer: Reducer&lt;T&gt;): Store&lt;T&gt; =&gt; {…}\n \nconst someStore = createStore(someTypedReducer);\nExplanation\nThis feature works like the infer syntax. We describe a generic type T which will be determined by the Typescript compiler each time you will use the function f. You can use this type to create a complex return type like in **Usage.\nThis is a very powerful feature which allows the creation of complex auto-inferred types.\nYou can take a look in Typescript 2.4 notes to see some other examples.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nNon Nullable type\nYou need to forbid a variable to be null (or undefined).\nCode\ntype NonNullable&lt;T&gt; = T extends null | undefined ? never : T;\nImportant note: NonNullable is available in global Typescript context\nUsage\nNonNullable&lt;string | null&gt; // string\nExplanation\nWe need to use a Typescript 2.8 trick with a distributive conditional type.\nIf we take T = string | undefined, we reduce the code with this:\nNonNullable&lt;string|undefined&gt; = (string extends undefined | null ? never : T) | (undefined extends undefined | null ? never : T);\nSo we check each type of T and if one of these types is null or undefined, it will be replaced by never which is the Typescript way to remove a type.\nYou can also define a Diff type to remove any type from T:\ntype Diff&lt;T, U&gt; = T extends U ? never : T;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nCode\ntype ReturnType&lt;T&gt; = T extends (…args: any[]) =&gt; infer R ? R : any;\nImportant note: ReturnType is available in global Typescript context.\nUsage\nconst f = () =&gt; 2;\n \nReturnType&lt;typeof f&gt; // number\nExplanation\nAnother Typescript 2.8 use here.\ninfer keyword tells to the compiler to get the type of a variable. We check if T is a function and telling to the compiler to associate a type R to the type of the return. So we just have to return the type R if T is a function.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nInstance Type of a class\nCode\ntype InstanceType&lt;T extends new (…args: any[]) =&gt; any&gt; = T extends new (…args: any[]) =&gt; infer R ? R : any;\nImportant note: InstanceType is available in global Typescript context.\nUsage\nclass C { constructor() {} }\n \nInstanceType&lt;typeof C&gt; // C\nExplanation\nAlways Typescript 2.8 use here.\nThis is the same trick as ReturnType. We just need to check if the object T extends the function new (which is the needed function to create a class in JS). If new exists, we just get the return type of the new function.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nSet all properties of an object as optional\nCode\ntype Partial&lt;T&gt; = { [P in keyof T]?: T[P] };\nImportant note: Partial is available in global Typescript context.\nUsage\nPartial&lt;{ value: number}&gt; // {value?: number}\nExplanation\nWe dive in Typescript 2.1 here.\nThe syntax used here is the mapped typed syntax. We iterate on each key of T (stored each time in the type variable P) and for each key P, we create a new optional property with its value T[P].\nIt seems complicated at the beginning, but it’s just nothing more than an iteration on all keys of the object T.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nGet the type of a function parameter\nCode\ntype FirstParameter&lt;T&gt; = T extends (arg1: infer U, …args: Array&lt;any&gt;) =&gt; any ? U : undefined;\n \ntype SecondParameter&lt;T&gt; = T extends (arg1: any, arg2: infer U, …args: Array&lt;any&gt;) =&gt; any ? U : undefined;\nUsage\nconst f = (someArg: number, otherArg: string) =&gt; true;\n \nFirstParameter&lt;typeof f&gt; // number\n \nSecondParameter&lt;typeof f&gt; // string\nExplanation\nSome custom use of Typescript 2.8.\ninfer syntax can be used for anything in typing. Here, we just tell to Typescript to create a type U from getting the type of a specific argument when T is a function with enough parameters.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nMake a union with all values of an array/object\nYou have an array, and you want to create a single union type with all values of an array or an object.\nCode\ntype Union&lt;T&gt; = T[keyof T];\nUsage\nUnion&lt;{value: number; otherValue: string}&gt; // number | string\nExplanation\nThis one looks so ridiculous, but I figure out how to do that after a long time. It’s a custom use of the mapped types and lookup types of Typescript 2.1.\nWe iterate on all keys of T on T itself. The lookup type (keyof T) gets all keys of T and create a union with all these keys. Accessing to T with a union of keys result by creating a union of values types.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\nWith these simple tricks, you can now achieve a lot of works in Typescript world.\nDon’t hesitate to comment if you have some questions about them. I’m available on this post comments or on my Twitter.\nThanks for reading! :)"},"Musique/Et-la-machine-devînt-artiste":{"title":"Et la machine devînt artiste","links":[],"tags":["generation","composition","art"],"content":"La musique est un art. Elle nous touche, nous transporte, nous fascine, mais sans jamais se répéter. Les compositeurs créent depuis des siècles nombre d’oeuvres uniques et formidables : nous pouvons goûter à la Danse Macabre de Camille Saint-Saëns et enchaîner aussitôt sur un Iron de Woodkid pour finir sur un Time de Pink Floyd. Et la technologie nous permet de vivre et revivre ces instants que la musique nous procure, encore et encore.\nEn contre-courant le plus total, la musique générative offre un aspect nouveau à ce que nous connaissons. Nous n’avons plus un morceau écoutable à l’infini, mais une infinité de morceaux écoutables une fois. Nous redécouvrons alors que la musique peut être éphémère et imprévisible, celle-ci nous offrant un unique billet vers un monde mystérieux.\nLa consommation musicale en 2019\nAvant toute chose, il est nécessaire de faire un point sur l’état de la musique, et notamment sa consommation, à l’heure où ces lignes sont écrites.\nD’après l’étude Music Listening de 2019 de l’IFPI (International Federation of the Phonographic Industry), basée sur les 16 à 64 ans en étudiant 18 pays :\n\nnous écoutons de la musique environ 18 heures par semaine (soit 2.5 heures par jour) (17.8h en 2018).\n89% de la consommation musicale provient des services de streaming (86% en 2018).\nnous écoutons de la musique dans la voiture, pour se relaxer à la maison ou encore en faisant le ménage et la cuisine.\n\nNous sommes donc des consommateurs de musique notoires, et ce via des services de streaming. Cependant, l’étude ne détaille pas les manières que les personnes ont de consommer la musique : est-ce que nous aimons les nouveautés ? Combien de fois nous écoutons un même morceau ? Est-ce que nous écoutons tous la même chose ?\nPour étayer mon propos, il est nécessaire de jeter un coup d’oeil à l’étude Extreme re-listening: Songs people love … and continue to love de Frederick Conrad, Jason Corey, Samantha Goldstein, Joseph Ostrow et Michael Sadowsky. À défaut de pouvoir obtenir le papier (merci au système de publications des papiers scientifiques), cet article du Michigan News détaille les points suivants :\n\n86% des participants écoute leurs musiques préférées quotidiennement ou plusieurs fois par semaine.\n43% des personnes réécoutant leurs musiques préférées quotidiennement le font au moins 3 fois par jour.\n60% écoutent leurs musiques préférées plusieurs fois d’affilée.\n\nOn peut aisément dire, à partir de ces statistiques, que les gens aiment particulièrement écouter les musiques auxquels ils se sentent proches. Nous semblons donc consommer régulièrement les mêmes morceaux.\nEn combinant ces deux études, on peut affirmer en partie que les gens aiment écouter des morceaux qu’ils connaissent, et ces morceaux sont des versions définies et figés dans le temps. A contrario du concert, une musique que nous écoutons ne changera pas : The Sound of Silence de Simon &amp; Garfunkel reste toujours le même, la seule différence étant la qualité d’écoute que nous avons aujourd’hui par rapport à sa sortie initiale.\nIl n’y a qu’une performance enregistrée une fois et répétée par la machine indéfiniment. Peut-être qu’à un moment il y aura une version remasterisée, mais elle ne change pas le matériel de base : elle ne fait que le faire sonner mieux par rapport aux règles de production de l’époque.\nGénérer is the new composer\nPetit historique personnel\nDurant mon cursus universitaire, j’ai eu l’occasion de rencontrer Pierre-Henri Vulliard, travaillant au SCRIME sur la génération musicale. Je me souviens d’un travail titanesque qu’il avait réalisé pour construire des morceaux en se basant sur des boîtes à rythme (dans un langage de programmation spécialisé dont j’ai oublié le nom), et c’était assez incroyable de voir ça. On découvre une machine qui compose en mélangeant des règles musicales et des nombres aléatoires, en ajoutant des variations basées sur le swing et tant d’autres critères.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tBenn Jordan aka. The Flashbulb\n\t\t\t\t\t\t\t\t\t\t\t\nPlusieurs années plus tard, Benn Jordan (The Flashbulb), compositeur de musiques électroniques, avait fait un point sur l’état de la musique générative à travers une série de vidéo Youtube (Partie 1 - Partie 2 - Partie 3). Le résultat était assez impressionnant, mais il s’agissait plus de génération de musique contrôlé et alors très redondant.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tJean-Michel Jarre et ses synthétiseurs analogiques\n\t\t\t\t\t\t\t\t\t\t\t\nPuis, en 2018, j’ai un ami qui m’a envoyé un article sur l’application EōN de JarreLab (= Jean-Michel Jarre). L’application coûte 10€, ce qui m’a rebuté au début, jusqu’à que je me laisse tenter. Et j’ai bien fait de me laisser tenter : je n’ai jamais connu une telle qualité de musique générative. C’est à tel point que je me demande toujours si on ne se moque pas de moi et que ce cher Jean-Michel a décidé de composer suffisamment de morceau pour que je ne puisse pas me souvenir des précédents.\n(Note : si vous êtes intéressés, c’est essentiellement de l’ambient / musique électronique et d’autres choses aussi, et c’est disponible ici uniquement sur iOS.)\nBref, on n’est pas là pour envoyer des fleurs à Jean-Michel.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t65daysofstatic\n\t\t\t\t\t\t\t\t\t\t\t\nPour continuer mes propos, l’année 2021 a été le moment où un petit groupe de post-rock instrumental britannique, 65daysofstatic, a décidé de créer un générateur de musiques nommé Wreckage Systems qui crée et diffuse de la musique sur plusieurs flux d’écoute (leur propre site et Youtube). Cette musique est créée selon différents schémas qu’ils ont développés et qu’ils continuent d’étoffer en se basant sur leurs travaux pour la musique pseudo-générative du jeu No Man’s Sky (qui est détaillée dans une excellente conférence à l’EGX). Les différentes musiques générées sont mensuellement exportées et retravaillées pour former des albums en version “fixe”.\nDécouverte de l’instant\nLa chose que EōN et Wreckage Systems m’ont fait réaliser est que la musique générative est éphémère. On peut la rapprocher, d’une certaine manière, à la musique créée en concert qui correspond à une version unique de plusieurs morceaux (tant que ceux-ci ne sont pas enregistrés). On peut garder des instants, on se souvient qu’il y a eu ce solo, cette mélodie, ce mix, mais on ne peut pas revivre le même moment.\nLa musique générative recrée ce sentiment et ramène l’écoute à ses origines les plus primaires : la découverte. Chaque morceau est une construction unique, et, pour peu que l’algorithme de génération aient des résultats suffisamment variable, il ne sera jamais possible de prévoir l’évolution des morceaux. Nous nous retrouvons dans un musée sans fin, perdu à déambuler dans les couloirs du son, sans aucun moyen de revenir sur nos pas.\nOn vit alors une expérience surnaturelle, où l’on écoute de la musique, jusqu’au moment où on entend une sonorité que l’on aime, qu’on aimerait réentendre, mais que nous savons perdue à jamais dans les méandres de l’électronique. Ô toi arpège au timbre si sompteux, ta perte fût un moment bien trop douloureux !\nGénérer l’existant : la composition\nSous ce titre qui ne veut presque rien dire, il est intéressant de mener la réflexion de ce que peut composer la musique générative. Nous avons traité d’un cas où la machine peut maintenant nous offrir de la musique de Jean-Michel Jarre et de 65daysofstatic jusqu’à ce que mort s’en suive. Mais serait-il possible d’appliquer ce procédé à une plus grande variété de musique ?\nLes évolutions sur l’intelligence artificielle durant les années 2010 sont une excellente réponse à cette question. Pour illustrer le propos, penchons nous sur le Doodle (les logos spéciaux de Google) du 21 Mars 2019 pour célébrer ce cher Johann Sebastian Bach (disponible ici). Ce Doodle propose à l’utilisateur de placer quelques notes sur une portée et génère une oeuvre étrangement ressemblante à ce qu’aurait pu proposer le compositeur allemand.\nTout l’aspect de composition proposé par ce Doodle est assurée derrière par un modèle de machine learning baptisé Coconet. Sans rentrer dans les détails, il s’agit d’une intelligence artificielle qui a analysé des partitions de Bach. Ensuite, on lui a donné un instrument d’un morceau de Bach, et l’intelligence devait retrouver ce qu’aurait composé Bach. À force de répéter cette opération sur un ensemble de morceaux suffisants (306 morceaux de chorales dans le cas présent), l’intelligence a alors été capable de réécrire des morceaux à la façon supposée de Bach. Coconet a fait l’objet d’un article de recherche intitulé Counterpoint by Convolution par Cheng-Zhi Anna huang, Tim Cooijmans, Adam Roberts, Aaron Courville et Douglas Eck.\nSans être hautain ou irrespectueux, si nous arrivons à avoir une intelligence artificielle capable de composer du Bach, je pense qu’il est possible de composer des musiques populaires modernes basées sur des structures musicales et des sonorités bien précises (par exemple, les fameux 4 accords magiques : Mi Maj - Si Maj - Do# Maj - La Maj). La machine a donc le pouvoir de composer.\nGénérer l’existant : le son\nLa seconde étape consiste alors à obtenir un son à faire palir l’Orchestre philharmonique de Berlin. Et vu qu’on parle de Berlin, on pourrait parler des travaux réalisées par Orchestral Tools pour enregistrer et fournir une interface pour les sons de l’intégralité de l’orchestre. Et le tout est disponible dans l’instrument virtuel Berlin Orchestra Inspire 1. On peut aussi parler de l’instrument virtuel pour les cuivres à faire palir les orchestres les plus imposants, mais on va en rester là.\nEncore mieux, j’ai eu l’occasion de travailler avec le nouveau VST Arkhis basé sur les outils de Orchestral Tools, et le résultat est simple : avec 3 accords, vous faites toutes les musiques d’ambiance des films, voire certains thèmes. Et il est certain qu’aujourd’hui, un bon nombre de compositeurs travaillent directement avec ce genre d’outils. Pour un exemple des capacités d’Arkhis, cette vidéo permet de voir un peu la force qu’à ce plug-in.\nLe charme d’un son passe aussi par un mixage de qualité pour rendre le son parfaitement audible. Et, même dans ce cas, il est possible d’y mettre de l’intelligence artificielle pour produire des sons de qualités. C’est notamment ce que propose LANDR proposant des masterings automatique soi-disant basée sur l’analyse de plus de 10 millions de masters. Et optionnellement, ils font la distribution.\nOn pourrait être tatillon en prétendant qu’il est compliqué à un ordinateur de produire une voix, mais quand je vois les progrès de l’instrument Vocaloid ainsi que les avancements dans la recherche sur le clonage de voix (démos disponibles ici), je pense qu’on va vite arriver à des choses incroyables.\nAvec un peu d’argent, il est donc possible de construire un pipeline de création musicale complètement électronique, capable de créer de la musique orchestrale (et bien plus encore), le tout de façon automatique.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nLes impacts possibles de la musique générative\nUne fin du droit d’auteur ?\nEn France et jusqu’à présent, si un artiste crée une oeuvre, il est assuré d’un droit de propriété incorporelle exclusif et opposable à tous (L111-1 du Code de la propriété intellectuelle). Néanmoins, que se passe-t-il lorsque la machine va créer une oeuvre ?\nLa législation française actuelle n’a aucune réponse sur ce point, mais plusieurs hyphothèses ont été abordées dans le cadre de la Mission Intelligence Artificielle et Culture réalisée par Alexandre Bensamoun et Joëlle Farchy par demande du Conseil supérieur de la propriété littéraire et artistique. Mais, comme nous allons le voir, chacune des solutions possèdent son lot de défauts qu’il est nécessaire de prendre en compte.\n1. Le droit d’auteur au concepteur·trice de l’IA\nL’idée la plus simple est que la personne qui a conçu l’intelligence créant la musique possède un droit d’auteur sur les créations. D’une certaine manière, le développeur·euse est responsable de ce que est l’IA (elle ou il l’a développé et a choisi son évolution par les jeux de données que l’IA utilise), et est donc responsable de ce que l’IA est censé produire.\nLa problématique principale levée sur cette argument est qu’il est impossible de prouver qu’une oeuvre a été générée par l’IA. Comment est-ce que je sais que le Doodle sur Bach a composé l’oeuvre que j’écoute, alors que je pourrais très bien être l’auteur de ce morceau ?\nEt, en allant un peu plus loin, comment faire appliquer ce droit d’auteur à une plate-forme comme Youtube ? Les robots de Youtube chargés de faire respecter le droit d’auteur (Content ID) n’ont aucun moyen de savoir si la personne qui a créé l’outil qui a créé l’oeuvre a donné son autorisation à la personne, car ils n’ont pas moyen de connaître l’outil derrière chaque morceau.\nDans la pratique, cette version du droit d’auteur n’est qu’applicable après analyse d’un humain, et encore, vu la progression récente des IAs dans le domaine des langues, les créations deviendront de moins en moins reconnaissables, et ce droit de plus en plus inapplicable.\n2. Le droit d’auteur à l’utilisateur de l’IA\nUne autre idée simple est que la personne qui utilise l’IA obtient le droit d’auteur de ce que l’IA va créer sur son matériel informatique. Il devient l’auteur de l’oeuvre créée par la machine.\nIci, le problème est que le droit d’auteur a été initialement créé pour permettre de protéger l’effort créatif, et que cet effort n’existe pas quand un utilisateur appuie sur un simple bouton pour créer une musique complète. On aurait alors une pléthore d’oeuvres sans effort créatif, et la signification initiale de l’oeuvre en serait que appauvrie.\n3. La création d’un nouveau droit\nCette idée couvre 3 notions différentes dont la finalité reste équivalente :\n\nla création d’un droit d’auteur spécifique à la création générée à la manière du droit du logiciel,\nla création d’un droit d’auteur à la manière d’un “droit voisin” (le droit d’auteur concernant les tiers indirects d’une musique comme les artises-interprètes),\nla création d’un droit sui generis à la manière du droit accordé aux producteurs de bases de données.\n\nSans rentrer dans les détails par faute de compréhension pointue, on considère ici que nous faisons face à un cas qui n’est pas couvert par le droit, et qu’une nouvelle catégorie de legislation spécifique à la création générée par intelligence artificielle est nécessaire.\nEst-ce qu’une nouvelle législation permettrait de corriger les problèmes levés dans le cadre des différents problèmes déjà énoncés ? Je n’ai malheureusement pas la connaissance nécessaire pour en juger.\n4. L’absence de droit privatif\nOn arrive à l’idée la plus simple : aucun droit d’auteur n’est défini pour les oeuvres générées par une intelligence artificielle. La raison principale est que la création la plus importante est la création de l’intelligence artificielle, qui est déjà rémunérée et soumis au droit du logiciel. Les créations ne sont qu’un résultat mécanique de la machine, et aucun processus créatif n’est pris en compte dans ce cas.\nOutre le fait qu’on assisterait à une massification pure et dure de la quantité musicale (potentiellement au détriment de la qualité), plusieurs détournements seraient possibles. Par exemple, pourquoi un artiste dirait que sa création proviendrait d’une intelligence artificielle alors qu’il serait couvert par le droit d’auteur (et potentiellement le droit voisin) dans le cas où il énonce qu’il est le créateur de la musique ? De même, qu’en est-il des musiques écrites par un humain qui seraient revendiquées comme musique d’une intelligence artificielle ?\n\nLes différentes propositions énoncées ici correspondent toutes à des choix relativement pertinents. Qu’il s’agisse d’une refonte de la loi jusqu’à l’abstention de toute modification, le choix sera essentiellement un choix politique, faisant état d’une position assumée vis-à-vis des créations artistiques des intelligences artificielles. La réflexion est déjà commencée, mais il est important de la poursuivre très sérieusement afin de déterminer non seulement notre position sur les oeuvres générées mais aussi notre vision de l’art génératif d’une manière générale.\nUne nouvelle écoute de la musique\nOutre l’aspect juridique, la musique générative pourrait avoir un impact artistique assez conséquent. Nous parlions précedemment de cette faculté qu’à la musique générative de proposer sans cesse de nouveaux morceaux, sans jamais sombrer dans la répétition. Nous avions aussi remarqué que, en général, nous préférions écouter des musiques que nous connaissons sur le bout des doigts. Qu’en serait-il si nous créerions des musiques avec la capacité de se modifier ?\nNous pourrions distinguer plusieurs types de modifications :\n\nla modification sonore ciblée : il s’agit simplement de modifier la façon qu’est synthétisé un son, comme lorsque l’on modifie l’enveloppe ou l’oscillateur d’un synthétiseur, ou que l’on ajoute un peu de distorsion sur une guitare.\nla modification sonore généralisée : on applique ici un effet léger un ensemble d’instruments, ou même à l’intégralité du morceau. Par exemple, l’ajout ou la modification d’un compresseur ou d’un égaliseur afin d’apporter un mixage différent au morceau.\nla variation temporelle : on modifie le rythme de la musique, en passant, par exemple, d’une version à 120bpm à une version à 115bpm. On pourrait même imaginer des musiques de genres comme la chillwave ou la downtempo avec des alternatives plus lourdes avec un tempo plus lent.\nla variation instrumentale : cette fois-ci, on change carrément l’instrument utilisé sur un morceau par un autre. Une partition jouée au glockenspiel pourrait être rejouée sur un xylophone ou un vibraphone.\nla variation mélodique : une mélodie serait modifiée en partie. Il est assez aisé d’imaginer une ou deux notes d’une mélodie qui serait jouées un ton plus haut, ou dont l’ordre serait modifiée.\nla transposition : on modifie la tonalité complète du morceau, en passant d’un morceau joué à partir d’un Mi Majeur en Mi Mineur ou en Fa Majeur. On pourrait alors imaginer des variantes plus bluesy d’un morceau rock.\nla variation structurelle : la structure de la musique est changée. On va modifier l’ordre d’entrée des instruments sur une progression, ou encore l’utilisation de ponts avant un refrain, et même le nombre de mesures dans un couplet.\nla différence rythmique : un rythme n’est pas forcément joué. Un compositeur pourrait prévoir des possibilités sur sa musique, et seulement certaines d’entre elles sont jouées.\netc.\n\nPar l’utilisation de ces modifications, l’écoute d’une musique serait renouvelée en permanence. Nous assisterions, d’une certaine manière, à un concert artificiel dont les possibilités seraient plus ou moins prévisibles, en alliant les capacités créatives de l’humain avec le pseudo-aléatoire de la machine.\nCet impact nécessiterait directement la refonte des systèmes audio existants (qu’ils soient software ou hardware) pour être capable de lire des morceaux variables, là où tous nos systèmes actuels ne font que lire bêtement des versions uniques d’un morceau.\nL’apogée des webradios génératives\nSur les plate-formes comme Twitch et Youtube, on peut retrouver des webradios diffusant (très souvent illégalement) des morceaux d’un ou plusieurs genres spécifiques, et ce en permanence.\nCe nouveau médium, descendant direct des radios de diffusion musicale, permet à des personnes d’écouter en permanence de la musique, et ce sans interruption aucune (a contrario des radios classiques). Il s’agit d’un moyen idéal pour être complètement concentré ou tout simplement pour découvrir de nouvelles musiques.\nD’une certaine manière, ces webradios pourraient être des fournisseurs de musiques génératives, offrant un moyen d’accès simple à de la musique adaptée pour la concentration et la relaxation de prime abord. On pourrait ensuite imaginer des radios diffusant des styles musicaux plus marqués, comme de la funk ou du metal, permettant une écoute sans cesse renouvelée.\nUne aide à la composition\nL’amélioration des techniques de générations sonores pourrait aussi devenir synonyme d’aide aux compositeurs. La machine pourrait aussi bien nous fournir une mélodie ou un rythme basé sur une idée en particulier (par exemple, un thème triste proposerait une mélodie en mineur avec un tempo lent) ou même construire un début d’orchestration en reconnaissant une mélodie chanté par un compositeur.\nL’idée ici n’est pas de remplacer les compositeurs·trices tels qu’iels, mais de les assister afin de donner le meilleur d’eux-mêmes et même d’obtenir des nouvelles façons de concevoir et de penser la musique. On retrouve notamment cette démarche avec les joueurs·euses de Go qui s’améliorent grandement à l’aide d’AlphaGo.\n\nLa musique générative est un concept incroyable qui, malgré son apparence, n’est pas contradictoire avec la musique “traditionnelle”. Elle permet de vivre des instants de bohneur au gré des bits, donnant la possibilité de créer des sons uniques et d’offrir un vecteur de changement à la musique traditionnelle.\nD’une certaine manière, j’ose penser que la musique générative est une évolution similaire à la musique numérique lorsqu’on était à la musique analogique, qu’il s’agisse d’une évolution des moyens de production ou des moyens de consommation. Il faut repenser toutes les techniques et les moyens de diffusion tels qu’ils existent aujourd’hui, pour ouvrir un nouvel univers que certains·nes précurseurs·euses expérimentent dés aujourd’hui.\n\nJe fais pas muzik  \nJe suis muzik\nChris Prolls\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tMerci de votre lecture :)\n\t\t\t\t\t\t\t\t\t\t\t"},"Musique/La-musique-des-souvenirs":{"title":"La musique des souvenirs","links":[],"tags":["playlist","mémoire","souvenirs","pensine"],"content":"\nEt tout d’un coup le souvenir m’est apparu. Ce goût c’était celui du petit morceau de madeleine que le dimanche matin, à Combray. […] Mais, quand d’un passé ancien rien ne subsiste, après la mort des êtres, après la destruction des choses, seules, plus frêles mais plus vivaces, plus immatérielles, plus persistantes, plus fidèles, l’odeur et la saveur restent encore longtemps, comme des âmes, à se rappeler, à attendre, à espérer, sur la ruine de tout le reste, à porter sans fléchir, sur leur gouttelette presque impalpable, l’édifice immense du souvenir.\n\nMarcel Proust, sans le savoir, a défini au travers de ces lignes un concept simple mais puissant : la madeleine de Proust. Une odeur, un goût ou de manière plus générale une chose nous permet de revoir une situation, un moment, un souvenir. On entrevoit des réminiscences de notre passé au travers d’une chose.\nEt c’est un phénomène que j’apprécie particulièrement au travers des différentes facettes de la musique. Pour ma part, l’écoute permet de me remémorer de la situation au moment précis de mon passé où j’écoutais cette musique. L’écoute d’une composition perso est encore plus forte car cette composition retranscrit un état d’esprit précis avec lequel j’ai écrit le morceau.\n\nPour l’exemple, quand j’écoute cette musique, je me souviens que je venais d’arriver sur Grenoble (c’était il y a 9 ans au moment où j’écris ce post), et je revois encore le chemin du tramway que je prenais en plein été caniculaire. Je revois toutes les personnes que j’ai rencontré pendant mon court séjour dans les études de médecine, alors que je serais quasiment incapable de me souvenir de ça sans ce stimulus.\nEn fait, la musique est mon journal intime. C’est un peu comme la Pensine de Dumbledore, sauf que vous évitez les effets désagréables du type vous êtes un fantôme et les gens peuvent vous traverser ou encore la chute libre quand vous entrez dans le souvenir.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tEn plus, ça prend de la place ce truc-là.\n\t\t\t\t\t\t\t\t\t\t\t\nDu coup, si vous êtes intéressé•e pour faire ce travail d’archivage, vous avez juste à prendre votre plateforme de streaming musicale préférée, créer une playlist et retrouver tous les morceaux qui vous évoquent quelque chose et que vous avez écouté plus de 3 fois (critère arbitraire que vous pouvez changer comme vous le souhaitez). Ajoutez les morceaux à la playlist et triez-les dans l’ordre chronologique dans lequel vous avez découvert et écouté en boucle chaque morceau.\nCe travail va à la fois :\n - vous faire rire quand vous allez vous rappeler des morceaux que vous écoutiez en boucle il y a 10 ans.\n - vous faire déprimer quand vous allez réécouter certains morceaux sensibles.\nMais vous verrez, une fois que ça sera fait, vous pourrez vous rappeler de tout ce que vous avez fait juste en regardant votre playlist ! Et surtout, pensez à la mettre à jour avec vos nouveaux morceaux que vous écoutez beaucoup, et à rajouter d’anciens morceaux si vous en retrouvez.\nPour vous donner une idée de ce que ça donne, la mienne est actuellement à 172 titres.\n"},"Sociologie/Quid-d'un-monde-sans-travail":{"title":"Quid d'un monde sans travail","links":[],"tags":["travail","Rensi","reflexion","France"],"content":"\nLe travail c’est la santé  \nRien faire c’est la conserver  \nLes prisonniers du boulot  \nN’font pas de vieux os.\n\nC’est au travers de ces paroles que l’illustre Henri Salvador commence sa musique hautement célèbre dans la culture française. Point de vue simple : si vous voulez mourir vieux, ne travaillez pas. Mais est-ce que cette utopie anti-macroniste peut être une réalité là où la vie de tous les jours nous donne un contre-exemple pur et simple ? Peut-il y avoir un monde où l’oisiveté serait reine, tandis que le travail serait devenu une activité dont seul les anciens connaîtrait l’Histoire ?\n\nAvant d’entrer dans le vif du sujet, je tenais à vous remercier de votre initiative à lire ce court essai. Peut-être va-t-il vous intéresser, vous énerver, vous éveiller : mon but est simplement de vous offrir un angle de vue qui me semble intéressant à aborder. Il s’agit d’un résumé de ma réflexion sur plusieurs semaines à propos de la notion même de travail, en pleine période de débat sur la retraite française.\nBien évidemment, je n’effleure que la surface de la problématique : le sujet mériterait des années de travaux acharnés pour espérer offrir une réponse précise au problème. Je vous prie donc de prendre mes propos comme une base possible de réflexion, de les utiliser, les modifier, les transformer comme bon vous semble pour forger votre propre approche du problème.\nBonne lecture !\n\nLe sens de « travail »\nD’après le Larousse, le travail est : \n\nune activité laborieuse de l’homme considérée comme un facteur essentiel de la production et de l’activité économique\n\nOn retrouve dans cette définition un point très important : le travail est essentiel à l’activité économique. Il est l’activité qui permet de vivre financièrement, et qui permet à la société de générer des biens et des richesses.\nIl est important de souligner que cette définition du travail est indépendante du régime politique dans laquelle elle est appliquée : le travail restera toujours essentiel à la sphère économique de la société qu’il s’agisse d’une société capitaliste, communiste ou encore socialiste. Seul sa justification va changer : dans une société capitaliste, nous travaillons pour augmenter notre capital, tandis que dans une société communiste, nous travaillons pour augmenter le capital de tout le monde.\nOn travaille dans l’objectif d’avoir une vie meilleure, un plus grand confort, pour que nous puissions nous épanouir. Cette objectif est donc un intermédiaire vers une vie où travailler n’est plus qu’un lointain souvenir. Dés lors qu’un individu obtient tout ce qui est nécessaire pour vivre une vie épanouie, il n’a plus de raison de continuer de se contraindre à travailler, et peut laisser choir son activité laborieuse au profit d’une vie enrichissante.\n\nLe travail proprement dit est donc un esclavage et, à ce titre, répugne de manière irréductible à la nature humaine. C’est seulement dans le jeu, ou le travail-jeu (…) que l’homme est libre, qu’il fait ce qui lui plaît, que son esprit se déploie de façon pleinement autonome, ce en quoi il est vraiment homme et accomplit le destin le plus élevé et le plus noble de l’humanité. \n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tGiuseppe Rensi, philosophe et avocat italien\n\t\t\t\t\t\t\t\t\t\t\t\nLes mots de Giuseppe Rensi au travers de son essai Contre le travail nous amènent au constat suivant : le travail est esclavage, le travailleur est esclave. On détruit la nature originel de l’humain, de cet humain qui réfléchit, qui construit, qui choisit, au profit de l’humain qui exécute.\nL’humain est un être joueur : il aime faire des choses, non pas par intérêt, mais parce qu’il le souhaite. Il agit par conviction et par désir. Le travail ne suit en aucun cas cette définition : nous pouvons désirer l’objectif du travail, mais l’activité de base reste une contrainte, et donc à l’opposé de ce que nous recherchons naturellement. \nTravail et oisiveté \nAu travers des différents gouvernements français, un constat est réalisable assez facilement : l’oisif est une plaie qu’il faut haïr. Cet être est un nuisible qui empêche les autres de travailler. Qu’importe le nom qu’on lui donne (chômeur, feignant, assisté), on lui octroie une image que le Diable lui-même n’a jamais été capable d’obtenir.\nOn peut expliquer cette réalité par l’éducation française dont on nous vante tant les mérites. Dés notre plus jeune âge, nous avons été éduqué•e•s pour être des travailleurs•euses. L’éducation telle qu’elle existe en France mise essentiellement sur le fait qu’il faut former les enfants à travailler. Dés le primaire, le plaisir et l’épanouissement de l’enfant est mis de côté pour se focaliser sur l’acquisition pure et dure des savoirs. Les élèves sont contraints de travailler, ils sont évalués en permanence, et tout être oisif est puni et châtié.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tAnother Brick in the Wall Part 2 - Pink Floyd\n\t\t\t\t\t\t\t\t\t\t\t\nUne fois les enseignements primaires, secondaires et tertiaires passés, il est nécessaire de se frayer une place dans la société. Et la société ne nous reconnaît qu’à la condition que nous ayons un travail : elle nous doit une chose si nous lui donnons quelque chose. De fait, l’être oisif est quasiment invisible : étant donné qu’il ne donne pas de sa personne, il n’est pas un composant essentiel, et on lui permet simplement de vivre qu’à la condition qu’un jour, il devienne un travailleur.\nIl pourrait être intéressant d’étudier l’image de l’oisiveté et de ses pratiquants dans les différents médias (traditionnels et modernes). Pareillement, il pourrait être pertinent d’effectuer une autre étude sur la perception d’un oisif par un travailleur. Mais, de mon point de vue, ce n’est pas un très grand risque de dire que l’oisiveté est, pour la plupart, la mère de tous les maux du monde.\nUn monde sans travail\nFinalement, dans une période où l’on prône le retour à la nature, la low-tech, la slow-food, ne serait-il pas logique de revenir à cet état où l’humain ne redeviendrait qu’un être simple agissant par sa propre volonté ?\nLa solution à la gestion d’un monde sans travail peut être vu en regardant le fonctionnement de la société grecque dans l’Antiquité. Le travail manuel était un labeur honteux qui n’était effectué que par les esclaves. Mais cela permettait aux intellectuels de vaquer à leurs occupations. Cette organisation permet à une partie de la population de vivre idéalement, mais à la condition de sacrifier une partie de la population. Dans ce modèle, on crée un état de privilégiés et d’esclaves.\n\nQu’il y ait donc des êtres qui soient, par nature, les uns libres, les autres esclaves, c’est évident pour ceux pour qui l’esclavage est à la fois utile et juste.  \n— Les Politiques, Aristote- I, 5, § 11, p. 103\n\nLa solution grecque n’est pas en accord avec mes convictions : on construit une société qui est logiquement injuste, en différenciant deux types d’individus. D’une certaine manière, on peut poser le constat que la vie oisive idéale nécessite implicitement que tous les individus ne la vivent pas : il est nécessaire que les travaux à la base de la société soient accomplis. \nOn peut donc définir sur le sujet deux visions :\n - la vision élitiste : on permet à certains individus de s’épanouir parfaitement au détriment d’une majorité de la société (pas de temps de travail pour une minorité).\n - la vision communautaire : chacun peut prétendre à plus d’épanouissement, à la condition que chacun prenne également part aux travaux (diminution du temps de travail général car augmentation du nombre de travailleurs).\n \nDéshumaniser le travail\nUne troisième vision devient de plus en plus cohérent au fur et à mesure des années : les travaux sont assumés par les machines. La robotique a fait des progrès incroyables ces dix dernières années, notamment avec l’apogée des réseaux neuronaux. On possède donc des machines plus intelligentes, plus productives et non concernées par les problèmes existentiels humains.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nL’intérêt actuel de la robotique concerne l’augmentation de la productivité et la baisse de ressources humaines qu’il est nécessaire pour faire un projet. Le but est donc, de base, purement capitaliste, voir même militaire si on prend la robotique développée par Boston Dynamics. Mais, indirectement, on peut considérer que la destruction des emplois engendrée par la robotique (voir l’étude d’Oxford Economics) est une aubaine : la quantité de travail disponible dans les sociétés baissent au fur et à mesure des années, et cette baisse va nécessiter une reconsidération des conditions de travail existantes.\nÀ terme, on peut considérer que le temps de travail va nécessairement baisser, ce qui permettra au fur et à mesure : \n - dans le cas d’une vision élitiste d’augmenter le nombre de personnes pouvant prétendre à une vie oisive.\n - dans le cas d’une vision communautaire d’augmenter le nombre d’heures d’oisiveté de l’ensemble de la société.\nEn allant toujours plus loin, si les progrès techniques et technologiques continuent sans interruption, on peut prétendre à terme obtenir un monde où les machines s’occupent de tous les travaux essentiels à la vie de l’humain, et que celui-ci puisse prétendre à jouir de sa vie par sa propre volonté, et uniquement par celle-ci.\nConséquences de la fin du travail\nLa disparition du travail dans notre utopie aurait forcément des conséquences sur le fonctionnement global de la société. Tout d’abord, la société fonctionne normalement sur l’argent, et cet argent est distribué principalement par l’intermédiaire du travail. Il est donc nécessaire de trouver un modèle de société qui puisse répondre à une société sans travail (ou, au minimum, avec moins de travail). \nOn pourrait alors penser à un modèle basé sur un revenu universel, permettant à chacun de subvenir à ses besoins, et permettant ensuite à ceux qui le veulent de s’investir pour obtenir plus d’argent. Ce revenu garantirait une base de vie correcte, tandis qu’il serait possible aux gens de s’investir plus dans la société, qu’il s’agisse de travail rémunéré ou de bénévolat. Qu’importe que certains s’enrichissent plus que d’autres, que leur cupidité nécessite de s’extraire des plaisirs de la vie, tant qu’ils ne deviennent pas nocifs au bien commun. On peut entendre par là qu’ils n’exercent pas de contrôle sur les produits nécessaires à la vie, ou encore qu’ils n’obligent pas la société à se moduler pour leurs besoins. La richesse ne devrait être qu’un moyen d’obtenir plus de choses sans jamais que d’autres en obtiennent moins.\nLes humains pourraient alors jouir de leurs activités et sortir d’un état de stress et de décrépitude que nous ne connaissons que trop bien de nos jours. Mais il est important que la diminution du temps de travail implique plus de temps libre, et ce temps libre nécessite d’être dépensé. Il est nécessaire que chacun puisse avoir de quoi se distraire, se cultiver, s’épanouir, se former, ou encore s’évader. D’une certaine manière, l’industrie des loisirs (sportif, culturel, etc.) prendrait alors une part encore plus importante qu’elle ne l’est déjà aujourd’hui. André Gorz avait déjà formulée cette pensée, sans forcément penser à l’exécution de sa formule (voir Métamorphoses du travail). Car si la conséquence est prévisible, il est nécessaire de savoir comment il est possible de répondre à cette demande en gardant toujours le même postulat en tête : les gens ne travaillent plus.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nNous nous retrouvons donc dans une société qui est censés produire une certaine quantité de biens et de faits culturels, mais il est nécessaire de produire ces choses. Notre postulat initial étant que la robotique remplacerait la main d’œuvre pour produire les biens de la société, est-ce réellement applicable au domaine de la culture ? Est-ce qu’un robot peut produire un film, composer une musique ou faire un concert ?\nPar extension, on peut considérer qu’il est nécessaire de contrôler et de maintenir les machines qui produisent. On peut considérer qu’un monde dans lequel les robots s’occupent d’eux-mêmes entre eux pourra exister, mais il s’agit probablement de notre vision utopiste poussée à l’extrême. En conséquence, l’humain a besoin de contrôler et de maintenir les productions des machines pour qu’elles continuent de produire suffisamment de choses pour que chacun•e puisse vivre à son aise. On retrouve donc, dans notre monde idéaliste, une certaine quantité de personnes qui doivent travailler pour le bien commun de tous. Est-ce que le travail est nécessaire, de fait, dans un monde qui souhaite faire disparaître le travail ?\nEnfin, pour que nous jouissions d’un confort de vie toujours plus élevé et continuer de maintenir l’humanité dans l’évolution, il est nécessaire de conserver un certain nombre d’esprits dévoués à la recherche et l’innovation pour le bien commun. De fait, on retrouve donc, sous le prétexte du bien commun, une nouvelle frange de la population qui travaille, et ce encore une fois a contrario de notre postulat de départ. Est-ce donc réellement possible de concevoir une organisation du monde où le travail n’existe donc plus ?\nTravail et jeu\nPour répondre à ces problématiques, Rensi a formulé que le contraire de la notion de travail est la notion de jeu. Il considère que le jeu correspond à l’essence de l’humain : nous jouons car nous décidons de jouer, de faire l’activité qui nous semble intéressante. Le jeu devient travail à partir du moment où l’on joue par contrainte. Le joueur•euse de football amateur joue par plaisir, tandis que le joueur•euse de football professionnel le fait pour vivre.\nEst-ce qu’il est possible de prendre du plaisir dans le travail ? La réponse est oui, et c’est la séparation que Rensi crée dans sa vision du monde. On trouve donc le travail-jeu qui implique la contrainte mais qui nous fournit une activité qui nous procure malgré tout du plaisir, tandis que le travail-travail est purement douleur. Le premier offre une activité qui nous stimule suffisamment selon nos critères pour que nous soyons bien dans cette activité, tandis que le deuxième n’offre rien d’épanouissant.\nDe cette vision à 3 catégories, on peut concevoir une autre conception d’un monde sans travail. On peut réfléchir à un monde dans lequel le travail-travail est voué à être exécuté par la robotique, tandis que le travail-jeu et le jeu reste la propriété humaine. On énonce alors que l’humain nécessitera forcément de produire des choses pour se développer lui-même.\nPour illustrer cette vision, on peut prendre l’exemple du compositeur qui écrit sa musique pour illustrer son art, transmettre une pensée, une émotion. Le compositeur développe sa façon de concevoir à travers l’évolution de ses compositions. Pareillement, le réalisateur de films cherche à raconter une histoire, à montrer le monde sous un angle différent, ou encore à atteindre le spectateur à travers son œuvre. Nous sommes dans le jeu. Cependant, dans ce cas-ci, l’humain a besoin de l’aide d’autres humains pour réussir à mener à bien le projet de film. Ces personnes vont donc travailler sous la contrainte du réalisateur, mais dans un même but : construire une œuvre dans laquelle ils prennent du plaisir. Ils sont stimulés par la création de ce projet.\nCes humains font donc partis de ce que l’on a nommé précédemment le travail-jeu : ils sont contraints d’effectuer une tâche, mais cette tâche leur permet de s’épanouir. Il apporte des idées, expriment leurs opinions et permettent d’aboutir à une vision collective à travers une unique entité. Il est nécessaire qu’il y ait un intérêt réel dans le projet, faute de quoi nous retombons dans le cas du travail-travail où l’esprit laisse sa place à l’exécution pure et dure des tâches.\nRepenser le travail\nNous avons donc défini une vision du monde tel que le travail n’est plus le moteur mais un composant. Chacun contribue à la société parce qu’il en a décidé. Les travailleurs côtoient les oisifs sans qu’il y ait une quelconque jalousie, car chacun fait ce qu’il lui plaît. Et c’est cette notion qui différencie le monde actuel de notre utopie : les individus ont le choix.\nSi cela peut paraître simplet, abstrait ou naïf, il me semble que c’est pourtant un des problèmes qui détruit à petit feu une société comme la France : les gens n’ont plus le droit de choisir ce qu’ils doivent faire de leur vie. Ils doivent suivre une voie toute tracée, effectuer des actions dans des créneaux horaires bien définis, et vivre cette vie jusqu’à, pour les chanceux, que la retraite arrive, et pour les autres, jusqu’à ce que la mort les sauvent.\nCe schéma de vie français, signé de la patte dure du libéralisme, construit sur l’édifice de l’élitisme républicain, octroie une vie humaine à ceux qui ont eu le privilège de naître à l’abri de leur nom. Il est une prison où la richesse devient une libération. Sans ça, le travailleur est voué à traîner son boulet pendant que l’institution dirigeante continue sans cesse de le fouetter pour qu’il aille toujours plus vite.\nEt là où le bât blesse, c’est que l’évolution de la société vise actuellement à créer des travailleurs sur une plus longue durée que ce que nous avions auparavant ! Si cela peut se justifier au premier abord sur l’argument de la durée de vie, il n’empêche que, d’une part, il est justifiable que le travail est plutôt antonyme de la notion de confort du corps. Il s’agit du principe même de pénibilité qui permet de savoir si un travail va nous amener plus ou moins vite à l’hôpital. De plus, sur le plan philosophique, nous passons nos plus belles années, celles où nous construisons le plus notre moi, notre intellect, notre physique, nos relations, nos projets, bref, notre vie, à subir le travail en espérant une retraite heureuse. N’est-il pas logique de penser à profiter de notre vie avant de se retrouver dans cette longue agonie qu’on nous promet depuis notre naissance ?\nIl est important de reconsidérer la part du travail dans la société, et la construction de celui-ci. Les années passent, la 203e décennie après Jésus-Christ a débutée, et pourtant le vent semble tourner de plus en plus en faveur de la richesse individuelle, le confort de sa personne et la mort de la communauté. L’évolution de la société passe par celle de ses fondements, et il est primordial que le débat sur le travail s’ouvre pour construire un idéal dans lequel chacun peut construire, s’épanouir, et tout simplement vivre.\n\nMaint’nant dans le plus p’tit village  \nLes gens travaillent comme des sauvages  \nPour se payer tout le confort  \nQuand ils l’ont, eh bien, ils sont morts.\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tHenri Salvador, quel bel homme !\n\t\t\t\t\t\t\t\t\t\t\t"},"Sociologie/Vers-une-nouvelle-conception-du-travail":{"title":"Vers une nouvelle conception du travail","links":[],"tags":["travail","france","remuneration"],"content":"Note : n’étant ni économiste ni sociologue, je ne vise qu’à apporter quelques pistes de réflexion qui, j’espère, seront au mieux source de lectures approfondies, au pire source de critiques hardies.\n\nCe que nous appelons “travail” est une invention de la modernité. […] S’il nous arrive de parler du “travail ménager”, du “travail artistique” ou du “travail d’autoproduction”, c’est en un sens fondamentalement différent de ceux-ci qu’a le travail placé par la société au fondement de son existence, à la fois moyen cardinal et but suprême.\n\nC’est en ces mots qu’André Gorz commence la première partie de son essai relatif aux Métamorphoses du travail. Le travail dont nous parlons, ce travail qui nous habille d’un statut social et nous permet de recevoir de l’argent, est la source essentielle de la vie dans la société française. Il correspond à cette activité où nous faisons profiter nos compétences physiques et/ou intellectuelles contre de l’argent.\nEn général, un·e travailleur·euse est rémunéré·e en fonction de son temps de travail, et potentiellement en fonction de sa productivité. Iel vit professionnellement en suivant un cycle de travail défini sur une à quatre semaines (d’après la législation française). Ce cycle est réitéré et peaufiné durant l’intégralité de sa carrière, sauf cas de vacances, de maladies et/ou d’événements exceptionnels qui vont réduire le nombre de jours travaillés.\nDans le modèle actuel, un·e travailleur·euse peut travailler plus que le nombre d’heures de son cycle, lui faisant bénéficier d’un meilleur salaire ou d’un temps de congé plus élevé. Mais, dans tous les cas, iel reste coincé dans son cycle jusqu’à l’arrivée à la retraite (qui s’éloigne de plus en plus aujourd’hui, faute de la médecine) ou, plus logiquement, jusqu’à l’arrivée d’un raz-le-bol du quotidien, par la manifestation d’une démission, de pathologies psychologiques ou encore de burn-outs.\nLe problème n’est pas la faute du travail : il est un devoir pour prétendre à être une personne de la société. Je donne mes compétences à la sphère publique, donc j’ai le droit d’exister dans cette sphère publique. Cependant, même s’il peut être un vecteur d’épanouissement pour certaines personnes, il n’en sera jamais le cas pour toute la population, là où certains politiques cherchent à nous faire croire l’inverse.\nL’épanouissement de chacun·e passe souvent par d’autres activités regroupées sous l’étiquette de loisirs. On pourrait définir ces activités comme ayant pour objectif de consommer notre temps libre sans but économique, par opposition au travail qui génère de l’argent avec du temps libre. Les loisirs sont très souvent une part importante du développement de soi, car ils permettent de créer des relations sociales, de développer de nouvelles compétences, d’acquérir d’autres connaissances, etc.\nLà où le bât blesse, c’est que le partage de notre vie entre travail et loisir se fait en suivant des cycles adaptés pour le travail et non pour le loisir. En tant qu’individu, si je souhaite prendre du temps pour découvrir une nouvelle langue ou apprendre un nouvel instrument, je ne peux qu’effectuer des activités qui me le permettent entre mes horaires de travail. Je n’ai cependant pas la possibilité de m’investir complètement dans un projet de vie, sauf si je prends une année sabbatique dont le succès reposera sur les économies que j’ai eu le temps de mettre de côté.\nBriser les cycles : le modèle de Gorz\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tAndré Gorz, philosophe et journaliste français\n\t\t\t\t\t\t\t\t\t\t\t\nLe modèle de Gorz (que je nomme ainsi car il s’agit d’un modèle de société dont il est l’auteur dans Metamorphoses du travail) est une théorie reposant sur une autre conception des cycles de travail.\nSa théorie est qu’un·e travailleur·euse ne possède plus un cycle de travail réparti sur quelques semaines, mais sur au minimum une année. Iel possède un quota annuel d’heures à effectuer (entre 1600 et 1800 en France), et organise son travail en fonction de ce nombre d’heures. Il est alors possible de créer des plannings de travail permettant d’alterner des semaines de travail intensives avec des semaines de congés.\nUn·e travailleur·euse peut donc être beaucoup plus actif·ve au travail pendant une période, de façon à pouvoir profiter de ses loisirs pendant une autre période. La rémunération d’un·e travailleur·euse ne serait donc plus lié à ses heures qu’iel a effectué·e dans le mois, mais correspondrait à 1/12e de son salaire annuel, et ce quelque soit ses horaires. C’est déjà le cas des animateurs et des professeurs, dont leurs temps de travail sont annualisés.\nLa théorie peut aussi être étendue à un quota de temps à vie, permettant à chacun·e de choisir des longues périodes de travail et de loisirs. On peut comparer cette idée à une sorte de revenu universel, sauf que le revenu serait garanti par le fait que la personne a un devoir de travail envers la société.\nPréparer l’avenir : la réduction du temps de travail\nUn des problèmes majeurs qui arrive au fur et à mesure de l’évolution est qu’il n’y aura plus assez de travail pour tout le monde. Les avancées dans la robotique et l’intelligence artificielle détruisent des postes de travail au fur et à mesure des années. Une étude menée par l’entreprise Oxford Economics prévoit la perte de 20 millions de postes dans le monde d’ici 2030, sans pouvoir prévoir la suite et les évolutions de l’intelligence artificielle.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tSource : Rise of The Robots, Oxford Economics, p. 22\n\t\t\t\t\t\t\t\t\t\t\t\nCe n’est pas un cas d’urgence, mais il est nécessaire de prévoir une société du futur où chacun puisse travailler pour subvenir à ses besoins. La réponse actuelle souvent proposée par des partis de gauche concernent l’implémentation d’un revenu universel permettant de subvenir aux besoins de base de tout individu.\nUne autre théorie possible est tout simplement de réduire le temps de travail en fonction du nombre de postes disponibles. Cela permettrait d’assurer à chacun·e un emploi permettant de vivre, en plus de pouvoir faire grandir les secteurs liés aux loisirs, comme les secteurs culturels et associatifs. Les gens possédant plus de temps pour vivre, il serait donc nécessaire de trouver des activités dans lesquelles dépenser ce temps.\nDe plus, la réduction du temps de travail n’implique pas directement de baisse de productivité. D’après cet article de la BBC, plusieurs expériences ont été menées en Nouvelle-Zélande, en Suède et en Islande sur des travailleurs·euses dont le temps de travail a été réduit. Aucune réduction de productivité n’a été constatée, et il a même été remarqué une amélioration dans le service client d’une entreprise.\nCette théorie de réduction du travail s’adapte parfaitement avec le modèle de Gorz : il suffit simplement de réduire le quota annuel de travail par personne pour pouvoir moduler le nombre de postes disponibles. Les plannings des travailleurs·euses seraient alors plus intermittents, avec de plus longues périodes pour les loisirs.\nComme une alternative à la rémunération monétaire\nTout·e travailleur·euse récupère un salaire de son travail. Au fur et à mesure de sa carrière, iel reçoit de nouveaux avantages en nature et/ou monétaires.\nUne application possible de la réduction du temps de travail serait que les entreprises puissent proposer, dans le cadre des avancées de carrière, la réduction du temps de travail du travailleur·euse.\nCritiques du modèle de Gorz\nJe trouve le modèle de Gorz fascinant, mais malheureusement, des interrogations restent en suspens :\nComment, en tant qu’entreprise, gérer l’intermittence de l’emploi des travailleurs·euses ?\nTous les modèles de gestion des entreprises sont basés sur le fait d’être au même endroit au même moment. Je pense qu’il y a déjà des éléments de réponses dans les méthodes de gestion du télé-travail, mais qu’il est nécessaire de pousser la réflexion non plus sur un problème géographique mais temporel.\nQuelles sont les règles à fixer pour ne pas tomber dans un modèle de sur-exploitation des travailleurs·euses ?\nLa mise en place d’un quota a minima annuel nécessiterait une refonte du Code du travail, et de définir des règles pour éviter à un·e travailleur·euse de travailler 35 heures en 2 jours, de travailler 6 mois d’affilée avec 10 jours de repos etc.\nIl s’agirait d’un travail extrêmement important à mener au cours de discussions entre syndicats et politiques, nécessitant probablement de multiples expérimentations afin de déterminer les limites des quotas de travail.\nEst-ce qu’il est nécessaire de fixer des objectifs de quota minimaux pour assurer le devoir entre travailleur·euse et société ?\nDe mon point de vue, il serait nécessaire de régir les quotas de travail par des paliers à atteindre au bout d’une période fixe pour éviter qu’une dette trop forte se crée entre la société et le travailleur·euse. Cela casserait une partie de la flexibilité de ce modèle, mais permettrait d’avoir une sécurité de la société vis-à-vis des individus.\n\nAndré Gorz nous a livré une vision sociétale qui a le mérite de penser aux travailleurs·euses, et à leur conception de la vie, partagée entre le devoir qu’implique la société (le travail) et le droit qu’elle leur offre (le loisir). L’intermittence que propose son modèle est une solution intéressante à des problèmes bien actuels.\nNous vivons une époque complexe : les politiques des gouvernements continuent de se focaliser sur l’emploi sans pour autant remettre en question sa place dans la société d’aujourd’hui. Au lieu de tester de nouvelles visions du monde, on se cantonne à des idées recyclées encore et encore. Il est nécessaire que nous allions de l’avant, et que nous proposions des modèles où puissent s’unir devoir du travail et droit du loisir.\n--- \nMerci d’avoir lu cet article.\nJe tenais, comme d’habitude, à remercier Jean “HackJack” B. qui, une fois encore, a sauvé cet article de la débauche orthographique.\nSi jamais vous avez d’autres idées ou des lectures relatives au domaine, je serai curieux d’y jeter une partie de mon esprit. N’hésitez pas à en faire part !\nEt comme d’habitude, le gif de la fin :\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tCute lizard thanks you for reading\n\t\t\t\t\t\t\t\t\t\t\t"},"index":{"title":"index","links":[],"tags":[],"content":"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\nTel le Michael Scott qui vogue au gré des clients et des ramettes de papier sur son Segway©, je vous souhaite la bienvenue sur cette magnifique page de ce magnifique site de cet absurde Internet.\nIci, vous pourrez lire des articles, des essais et autres torchons rédigés sans autre prétention que de partager mes opinions les plus chaudes de votre région. Je parlerai sûrement de domaines dont je n’ai aucune compétence tel le meilleure intervenant de CNews. Vous êtes donc chaleureusement invité•es à conserver votre esprit critique lors de toute lecture dans cet endroit.\nPour votre information, je travaille dans la tech, je suis également musicien et g@m3rz, je lis de la sociologie pour paraître fûté en société, je hais le capitalisme et le libéralisme, j’écris en inclusif, et si l’un de ces points vous dérange, vous pouvez fermer l’onglet de votre navigateur sans aller plus loin.\nVous avez également mes réseaux sociaux en bas de toutes les pages pour pouvoir collecter plus d’informations sur moi en cas de besoin. Bien évidemment, si vous souhaitez me contacter pour m’insulter me remercier, passez par Mastodon.\nBonne lecture !"}}